<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>CSS不同类型与使用不同类型的优缺点</title>
    <url>/2019/01/15/CSS%E4%B8%8D%E5%90%8C%E7%B1%BB%E5%9E%8B%E4%B8%8E%E4%BD%BF%E7%94%A8%E4%B8%8D%E5%90%8C%E7%B1%BB%E5%9E%8B%E7%9A%84%E4%BC%98%E7%BC%BA%E7%82%B9/</url>
    <content><![CDATA[<h2 id="内联样式、内部样式、外部样式"><a href="#内联样式、内部样式、外部样式" class="headerlink" title="内联样式、内部样式、外部样式"></a>内联样式、内部样式、外部样式</h2><h3 id="内联样式"><a href="#内联样式" class="headerlink" title="内联样式"></a>内联样式</h3><p>使用 style 关键字将 css 代码嵌入到 html 代码中，与 html 代码混写。具体如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">"color:red; text-align:center"</span>&gt;</span>内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="内部样式"><a href="#内部样式" class="headerlink" title="内部样式"></a>内部样式</h3><p>在 html 文件中 head 中使用一对标签 style,将 css 代码声明其中。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;<span class="selector-tag">head</span>&gt;</span><br><span class="line">&lt;<span class="selector-tag">style</span>&gt;</span><br><span class="line">    <span class="selector-tag">p</span> &#123;</span><br><span class="line">      <span class="attribute">color</span>:red;</span><br><span class="line">      <span class="attribute">text-align</span>:center</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br></pre></td></tr></table></figure>

<h3 id="外部样式"><a href="#外部样式" class="headerlink" title="外部样式"></a>外部样式</h3><p>将 css 样式单独写成一个文件，在 html 文件中通过 link 引入。</p>
<p>举例 css 文件名: <code>example.css</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"example.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="使用不同类型-css-的优缺点"><a href="#使用不同类型-css-的优缺点" class="headerlink" title="使用不同类型 css 的优缺点"></a>使用不同类型 css 的优缺点</h2><h3 id="内联样式-1"><a href="#内联样式-1" class="headerlink" title="内联样式"></a>内联样式</h3><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><ol>
<li>方便，快捷</li>
<li>与某个元素的有关样式一目了然</li>
<li>加载和渲染 html 时同时加载和渲染 css 文件，减少 http 请求，减少文件下载数量</li>
</ol>
<h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><ol>
<li>优先级最高，容易造成混乱，不利于后期维护</li>
<li>html 与 css 混合写，代码显得冗余、复杂。不符合 html 与 css 分离的要求。</li>
<li>代码可复用性查</li>
</ol>
<h3 id="内部样式-1"><a href="#内部样式-1" class="headerlink" title="内部样式"></a>内部样式</h3><h4 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h4><ol>
<li>减少页面请求</li>
<li>实现基本的 html 与 css 分离</li>
<li>加载和渲染 html 时同时加载和渲染 css 文件，减少 http 请求，减少文件下载数量</li>
</ol>
<h4 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h4><ol>
<li>不能跨 html 文件进行代码复用</li>
</ol>
<h3 id="外部样式-1"><a href="#外部样式-1" class="headerlink" title="外部样式"></a>外部样式</h3><h4 id="优点-2"><a href="#优点-2" class="headerlink" title="优点"></a>优点</h4><ol>
<li>css 单独写成一个文件，便于管理 css 代码</li>
<li>复用代码方便，可以跨多个 html 文件管理 css 代码</li>
</ol>
<h4 id="缺点-2"><a href="#缺点-2" class="headerlink" title="缺点"></a>缺点</h4><ol>
<li>需要单独加载文件，增加 HTTP 请求数，占用资源，延缓了网页加载速度</li>
</ol>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>ES6中类的私有方法</title>
    <url>/2019/06/16/ES6%E4%B8%AD%E7%B1%BB%E7%9A%84%E7%A7%81%E6%9C%89%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p>实现私有方法是类的常规操作，那么有哪些方法呢？经过查找有以下几种。</p>
<ol>
<li>在命名上加以区分，在私有方法前加上下划线(不靠谱，该访问的还是可以访问到)</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Widget</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 公有方法</span></span><br><span class="line">  foo(baz) &#123;</span><br><span class="line">    <span class="keyword">this</span>._bar(baz);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 私有方法</span></span><br><span class="line">  _bar(baz) &#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">this</span>.snaf = baz);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>将方法移除类，这样方法对于类是不可访问的。（不靠谱，毕竟私有方法还是要在类中实现,除非类是单独的一个文档，反否则，这样这个函数对于类外的代码都是可以访问的）</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Widget</span> </span>&#123;</span><br><span class="line">  foo(baz) &#123;</span><br><span class="line">    bar.call(<span class="keyword">this</span>, baz);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params">baz</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (<span class="keyword">this</span>.snaf = baz);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>使用 symbol 使得外界无法访问,symbol 值仍在类外(还行，缺点是过于复杂)</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> bar = <span class="built_in">Symbol</span>(<span class="string">"bar"</span>);</span><br><span class="line"><span class="keyword">const</span> snaf = <span class="built_in">Symbol</span>(<span class="string">"snaf"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">myClass</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 公有方法</span></span><br><span class="line">  foo(baz) &#123;</span><br><span class="line">    <span class="keyword">this</span>[bar](baz);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 私有方法</span></span><br><span class="line">  [bar](baz) &#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">this</span>[snaf] = baz);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>技术</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>ES6</tag>
      </tags>
  </entry>
  <entry>
    <title>Javascript对象数组操作参考</title>
    <url>/2019/01/14/Javascript%E5%AF%B9%E8%B1%A1%E6%95%B0%E7%BB%84%E6%93%8D%E4%BD%9C%E5%8F%82%E8%80%83/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><h3 id="起源"><a href="#起源" class="headerlink" title="起源"></a>起源</h3><ul>
<li>对象数组与二维数据表相似</li>
<li>工作中大部分接触对象数组，很多时候都是在对对象数组进行操作以及对其中的数据进行处理</li>
</ul>
<h3 id="所用数据"><a href="#所用数据" class="headerlink" title="所用数据"></a>所用数据</h3><p>不说明的情况，所用的数据一般指以下。</p>
<h4 id="数据"><a href="#数据" class="headerlink" title="数据"></a>数据</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> student = [</span><br><span class="line">  &#123;</span><br><span class="line">    id: <span class="number">1</span>,</span><br><span class="line">    stuNo: <span class="number">20190801</span>,</span><br><span class="line">    name: <span class="string">"王二二"</span>,</span><br><span class="line">    age: <span class="number">21</span>,</span><br><span class="line">    major: <span class="string">"计算机科学与技术"</span>,</span><br><span class="line">    isParty: <span class="number">1</span>,</span><br><span class="line">    sex: <span class="number">0</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    id: <span class="number">2</span>,</span><br><span class="line">    stuNo: <span class="number">20190802</span>,</span><br><span class="line">    name: <span class="string">"李冬梅"</span>,</span><br><span class="line">    age: <span class="number">20</span>,</span><br><span class="line">    major: <span class="string">"计算机科学与技术"</span>,</span><br><span class="line">    isParty: <span class="number">0</span>,</span><br><span class="line">    sex: <span class="number">1</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    id: <span class="number">3</span>,</span><br><span class="line">    stuNo: <span class="number">20190803</span>,</span><br><span class="line">    name: <span class="string">"张晓芳"</span>,</span><br><span class="line">    age: <span class="number">21</span>,</span><br><span class="line">    major: <span class="string">"汉语言文学"</span>,</span><br><span class="line">    isParty: <span class="number">1</span>,</span><br><span class="line">    sex: <span class="number">1</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    id: <span class="number">4</span>,</span><br><span class="line">    stuNo: <span class="number">20190804</span>,</span><br><span class="line">    name: <span class="string">"张雨"</span>,</span><br><span class="line">    age: <span class="number">24</span>,</span><br><span class="line">    major: <span class="string">"汉语言文学"</span>,</span><br><span class="line">    isParty: <span class="number">1</span>,</span><br><span class="line">    sex: <span class="number">0</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    id: <span class="number">5</span>,</span><br><span class="line">    stuNo: <span class="number">20190805</span>,</span><br><span class="line">    name: <span class="string">"张子豪"</span>,</span><br><span class="line">    age: <span class="number">22</span>,</span><br><span class="line">    major: <span class="string">"通信工程"</span>,</span><br><span class="line">    isParty: <span class="number">0</span>,</span><br><span class="line">    sex: <span class="number">0</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">];</span><br></pre></td></tr></table></figure>

<h4 id="数据含义说明"><a href="#数据含义说明" class="headerlink" title="数据含义说明"></a>数据含义说明</h4><table>
<thead>
<tr>
<th>属性名称</th>
<th>中文含义</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td>id</td>
<td>id</td>
<td></td>
</tr>
<tr>
<td>stuNo</td>
<td>学号</td>
<td>8 位</td>
</tr>
<tr>
<td>name</td>
<td>名字</td>
<td></td>
</tr>
<tr>
<td>age</td>
<td>年龄</td>
<td></td>
</tr>
<tr>
<td>major</td>
<td>专业</td>
<td></td>
</tr>
<tr>
<td>isParty</td>
<td>是否是党员</td>
<td>否:0,是:1</td>
</tr>
<tr>
<td>sex</td>
<td>性别</td>
<td>男:0, 女:1</td>
</tr>
</tbody></table>
<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul>
<li><a href="#检索">1 检索</a><ul>
<li><a href="#检索数据">1.1 检索数据</a></li>
</ul>
</li>
<li><a href="#排序">2 排序</a></li>
<li><a href="#过滤">3 过滤</a></li>
<li><a href="#插入数据">4 插入数据</a></li>
<li><a href="#操作对象数组">5 操作对象数组</a><ul>
<li><a href="#创建">5.1 创建</a></li>
<li><a href="#更新">5.2 更新</a></li>
<li><a href="#删除">5.3 删除</a></li>
<li><a href="#重命名">5.4 重命名</a></li>
</ul>
</li>
</ul>
<h2 id="根据-id-检索名字-id-唯一"><a href="#根据-id-检索名字-id-唯一" class="headerlink" title="根据 id 检索名字(id 唯一)"></a>根据 id 检索名字(id 唯一)</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> getName = <span class="function">(<span class="params">id, arr</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> filterArr = arr.filter(<span class="function">(<span class="params">item</span>) =&gt;</span> item.id == id);</span><br><span class="line">  <span class="keyword">return</span> filterArr.length &gt; <span class="number">0</span> ? filterArr[<span class="number">0</span>].name : <span class="string">""</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(getName(<span class="number">5</span>, student)); <span class="comment">// 张子豪</span></span><br></pre></td></tr></table></figure>

<h2 id="普通截取"><a href="#普通截取" class="headerlink" title="普通截取"></a>普通截取</h2><ul>
<li>截取 1</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">student.map(<span class="function">(<span class="params">&#123; id, name &#125;</span>) =&gt;</span> (&#123; id, name &#125;));</span><br><span class="line"></span><br><span class="line"><span class="comment">/*-----res-----*/</span></span><br><span class="line">[</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">"王二二"</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">"李冬梅"</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">name</span>: <span class="string">"张晓芳"</span> &#125;,</span><br><span class="line">];</span><br></pre></td></tr></table></figure>

<ul>
<li>截取 2</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">student.map(<span class="function">(<span class="params">&#123; id &#125;</span>) =&gt;</span> id);</span><br><span class="line"><span class="comment">/*----- res-----*/</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br></pre></td></tr></table></figure>

<h2 id="截取属性并去重"><a href="#截取属性并去重" class="headerlink" title="截取属性并去重"></a>截取属性并去重</h2><ul>
<li>去重 1: 返回对象数组</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">getUniqueArray(array, item)&#123;</span><br><span class="line">    <span class="keyword">let</span> uniqueArray = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; array.length; i++) &#123;</span><br><span class="line">      <span class="keyword">let</span> flag = <span class="literal">true</span>;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; uniqueArray.length; j++) &#123;</span><br><span class="line">        <span class="keyword">if</span> ((uniqueArray[j][item] === array[i][item])) &#123;</span><br><span class="line">          flag = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">        uniqueArray.push(array[i]);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> uniqueArray;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>去重 2: 返回一维数组</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">[...new <span class="built_in">Set</span>(student.map(<span class="function">(<span class="params">&#123; sex &#125;</span>) =&gt;</span> sex))];</span><br><span class="line"></span><br><span class="line"><span class="comment">/*----- res -----*/</span></span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>];</span><br></pre></td></tr></table></figure>

<h2 id="过滤"><a href="#过滤" class="headerlink" title="过滤"></a>过滤</h2><ul>
<li><ol>
<li>比较运算符及逻辑运算: <code>= &gt; &lt; &gt;= ,&lt;=, !=,&lt;&gt; ,|| &amp;&amp;</code></li>
</ol>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">student.filter(<span class="function">(<span class="params">item</span>) =&gt;</span> item.age &gt; <span class="number">20</span>);</span><br><span class="line"><span class="comment">/*-----res-----*/</span></span><br><span class="line">[</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">stuNo</span>: <span class="number">20190601</span>, <span class="attr">name</span>: <span class="string">"王二二"</span>, <span class="attr">age</span>: <span class="number">21</span>, <span class="attr">major</span>: <span class="string">"计算机科学与技术"</span>, <span class="attr">isParty</span>: <span class="number">1</span>, <span class="attr">sex</span>: <span class="number">0</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">stuNo</span>: <span class="number">20190620</span>, <span class="attr">name</span>: <span class="string">"张晓芳"</span>, <span class="attr">age</span>: <span class="number">21</span>, <span class="attr">major</span>: <span class="string">"汉语言文学"</span>, <span class="attr">isParty</span>: <span class="number">1</span>, <span class="attr">sex</span>: <span class="number">1</span> &#125;,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">student.filter(<span class="function">(<span class="params">item</span>) =&gt;</span> item.sex === <span class="number">0</span>);</span><br><span class="line"><span class="comment">/*----- res -----*/</span></span><br><span class="line">[&#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">stuNo</span>: <span class="number">20190601</span>, <span class="attr">name</span>: <span class="string">"王二二"</span>, <span class="attr">age</span>: <span class="number">21</span>, <span class="attr">major</span>: <span class="string">"计算机科学与技术"</span>, <span class="attr">isParty</span>: <span class="number">1</span>, <span class="attr">sex</span>: <span class="number">0</span> &#125;];</span><br><span class="line"></span><br><span class="line">student.filter(<span class="function">(<span class="params">item</span>) =&gt;</span> item.age &gt; <span class="number">20</span> &amp;&amp; item.age &lt; <span class="number">22</span>);</span><br><span class="line"><span class="comment">/*----- res -----*/</span></span><br><span class="line">[</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">stuNo</span>: <span class="number">20190601</span>, <span class="attr">name</span>: <span class="string">"王二二"</span>, <span class="attr">age</span>: <span class="number">21</span>, <span class="attr">major</span>: <span class="string">"计算机科学与技术"</span>, <span class="attr">isParty</span>: <span class="number">1</span>, <span class="attr">sex</span>: <span class="number">0</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">stuNo</span>: <span class="number">20190620</span>, <span class="attr">name</span>: <span class="string">"张晓芳"</span>, <span class="attr">age</span>: <span class="number">21</span>, <span class="attr">major</span>: <span class="string">"汉语言文学"</span>, <span class="attr">isParty</span>: <span class="number">1</span>, <span class="attr">sex</span>: <span class="number">1</span> &#125;,</span><br><span class="line">];</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>in 范围<br>查询学号为<code>[20190601,20190614]</code>的数组</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> range = [<span class="number">20190601</span>, <span class="number">20190614</span>];</span><br><span class="line"><span class="keyword">let</span> res = student.filter(<span class="function">(<span class="params">item</span>) =&gt;</span> range.includes(item.stuNo));</span><br><span class="line"><span class="comment">/*----- res -----*/</span></span><br><span class="line">[</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">stuNo</span>: <span class="number">20190601</span>, <span class="attr">name</span>: <span class="string">"王二二"</span>, <span class="attr">age</span>: <span class="number">21</span>, <span class="attr">major</span>: <span class="string">"计算机科学与技术"</span>, <span class="attr">isParty</span>: <span class="number">1</span>, <span class="attr">sex</span>: <span class="number">0</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">stuNo</span>: <span class="number">20190614</span>, <span class="attr">name</span>: <span class="string">"李冬梅"</span>, <span class="attr">age</span>: <span class="number">20</span>, <span class="attr">major</span>: <span class="string">"计算机科学与技术"</span>, <span class="attr">isParty</span>: <span class="number">0</span>, <span class="attr">sex</span>: <span class="number">1</span> &#125;,</span><br><span class="line">];</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>模糊查询<br>查询名字为’张’的学生</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">student.filter(<span class="function">(<span class="params">item</span>) =&gt;</span> item.name.includes(<span class="string">"张"</span>));</span><br><span class="line"><span class="comment">/*----- res ------*/</span></span><br><span class="line">[</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">stuNo</span>: <span class="number">20190620</span>, <span class="attr">name</span>: <span class="string">"张晓芳"</span>, <span class="attr">age</span>: <span class="number">21</span>, <span class="attr">major</span>: <span class="string">"汉语言文学"</span>, <span class="attr">isParty</span>: <span class="number">1</span>, <span class="attr">sex</span>: <span class="number">1</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">4</span>, <span class="attr">stuNo</span>: <span class="number">20190620</span>, <span class="attr">name</span>: <span class="string">"张雨"</span>, <span class="attr">age</span>: <span class="number">24</span>, <span class="attr">major</span>: <span class="string">"汉语言文学"</span>, <span class="attr">isParty</span>: <span class="number">1</span>, <span class="attr">sex</span>: <span class="number">0</span> &#125;,</span><br><span class="line">];</span><br></pre></td></tr></table></figure>

<h2 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h2><ol>
<li>升序</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*------ 按年龄从小到大排序 ------ */</span></span><br><span class="line">student.sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a.age &gt; b.age);</span><br><span class="line"><span class="comment">/*------ res ------*/</span></span><br><span class="line">[</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">stuNo</span>: <span class="number">20190614</span>, <span class="attr">name</span>: <span class="string">"李冬梅"</span>, <span class="attr">age</span>: <span class="number">20</span>, <span class="attr">major</span>: <span class="string">"计算机科学与技术"</span>, <span class="attr">isParty</span>: <span class="number">0</span>, <span class="attr">sex</span>: <span class="number">1</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">stuNo</span>: <span class="number">20190601</span>, <span class="attr">name</span>: <span class="string">"王二二"</span>, <span class="attr">age</span>: <span class="number">21</span>, <span class="attr">major</span>: <span class="string">"计算机科学与技术"</span>, <span class="attr">isParty</span>: <span class="number">1</span>, <span class="attr">sex</span>: <span class="number">0</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">stuNo</span>: <span class="number">20190620</span>, <span class="attr">name</span>: <span class="string">"张晓芳"</span>, <span class="attr">age</span>: <span class="number">21</span>, <span class="attr">major</span>: <span class="string">"汉语言文学"</span>, <span class="attr">isParty</span>: <span class="number">1</span>, <span class="attr">sex</span>: <span class="number">1</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">4</span>, <span class="attr">stuNo</span>: <span class="number">20190620</span>, <span class="attr">name</span>: <span class="string">"张雨"</span>, <span class="attr">age</span>: <span class="number">24</span>, <span class="attr">major</span>: <span class="string">"汉语言文学"</span>, <span class="attr">isParty</span>: <span class="number">1</span>, <span class="attr">sex</span>: <span class="number">0</span> &#125;,</span><br><span class="line">];</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>降序</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*----- 按年龄从大到小排序 ------ */</span></span><br><span class="line">student.sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a.age &lt; b.age);</span><br><span class="line"><span class="comment">/*------ res ------*/</span></span><br><span class="line">[</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">4</span>, <span class="attr">stuNo</span>: <span class="number">20190620</span>, <span class="attr">name</span>: <span class="string">"张雨"</span>, <span class="attr">age</span>: <span class="number">24</span>, <span class="attr">major</span>: <span class="string">"汉语言文学"</span>, <span class="attr">isParty</span>: <span class="number">1</span>, <span class="attr">sex</span>: <span class="number">0</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">stuNo</span>: <span class="number">20190601</span>, <span class="attr">name</span>: <span class="string">"王二二"</span>, <span class="attr">age</span>: <span class="number">21</span>, <span class="attr">major</span>: <span class="string">"计算机科学与技术"</span>, <span class="attr">isParty</span>: <span class="number">1</span>, <span class="attr">sex</span>: <span class="number">0</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">stuNo</span>: <span class="number">20190620</span>, <span class="attr">name</span>: <span class="string">"张晓芳"</span>, <span class="attr">age</span>: <span class="number">21</span>, <span class="attr">major</span>: <span class="string">"汉语言文学"</span>, <span class="attr">isParty</span>: <span class="number">1</span>, <span class="attr">sex</span>: <span class="number">1</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">stuNo</span>: <span class="number">20190614</span>, <span class="attr">name</span>: <span class="string">"李冬梅"</span>, <span class="attr">age</span>: <span class="number">20</span>, <span class="attr">major</span>: <span class="string">"计算机科学与技术"</span>, <span class="attr">isParty</span>: <span class="number">0</span>, <span class="attr">sex</span>: <span class="number">1</span> &#125;,</span><br><span class="line">];</span><br></pre></td></tr></table></figure>

<h2 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">[...student, ...newStudent];</span><br><span class="line"><span class="comment">/*----- res ----- */</span></span><br><span class="line">[</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">stuNo</span>: <span class="number">20190601</span>, <span class="attr">name</span>: <span class="string">"王二二"</span>, <span class="attr">age</span>: <span class="number">21</span>, <span class="attr">major</span>: <span class="string">"计算机科学与技术"</span>, <span class="attr">isParty</span>: <span class="number">1</span>, <span class="attr">sex</span>: <span class="number">0</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">stuNo</span>: <span class="number">20190614</span>, <span class="attr">name</span>: <span class="string">"李冬梅"</span>, <span class="attr">age</span>: <span class="number">20</span>, <span class="attr">major</span>: <span class="string">"计算机科学与技术"</span>, <span class="attr">isParty</span>: <span class="number">0</span>, <span class="attr">sex</span>: <span class="number">1</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">stuNo</span>: <span class="number">20190620</span>, <span class="attr">name</span>: <span class="string">"张晓芳"</span>, <span class="attr">age</span>: <span class="number">21</span>, <span class="attr">major</span>: <span class="string">"汉语言文学"</span>, <span class="attr">isParty</span>: <span class="number">1</span>, <span class="attr">sex</span>: <span class="number">1</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">4</span>, <span class="attr">stuNo</span>: <span class="number">20190620</span>, <span class="attr">name</span>: <span class="string">"张雨"</span>, <span class="attr">age</span>: <span class="number">24</span>, <span class="attr">major</span>: <span class="string">"汉语言文学"</span>, <span class="attr">isParty</span>: <span class="number">1</span>, <span class="attr">sex</span>: <span class="number">0</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">5</span>, <span class="attr">stuNo</span>: <span class="number">2019067</span>, <span class="attr">name</span>: <span class="string">"马宇"</span>, <span class="attr">age</span>: <span class="number">23</span>, <span class="attr">major</span>: <span class="string">"旅游管理"</span>, <span class="attr">isParty</span>: <span class="number">1</span>, <span class="attr">sex</span>: <span class="number">1</span> &#125;,</span><br><span class="line">];</span><br></pre></td></tr></table></figure>

<h3 id="操作对象数组"><a href="#操作对象数组" class="headerlink" title="操作对象数组"></a>操作对象数组</h3><h2 id="转为对象数组"><a href="#转为对象数组" class="headerlink" title="转为对象数组"></a>转为对象数组</h2><p>数据如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let price &#x3D; &#123;</span><br><span class="line">  空调: 12200,</span><br><span class="line">  冰箱: 14440,</span><br><span class="line">  洗衣机: 1222</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>具体操作</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let newPrice &#x3D; [];</span><br><span class="line">for (let [k, v] of Object.entries(price)) &#123;</span><br><span class="line">  newPrice &#x3D; [...newPrice, &#123; name: k, value: v &#125;];</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*------ 结果 -----*&#x2F;</span><br><span class="line">[&#123;&quot;name&quot;:&quot;空调&quot;,&quot;value&quot;:12200&#125;,&#123;&quot;name&quot;:&quot;冰箱&quot;,&quot;value&quot;:14440&#125;,&#123;&quot;name&quot;:&quot;洗衣机&quot;,&quot;value&quot;:1222&#125;]</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>Read Plan</title>
    <url>/2019/05/14/Read-Plan/</url>
    <content><![CDATA[<h1 id="百书工程"><a href="#百书工程" class="headerlink" title="百书工程"></a>百书工程</h1><hr>
<h2 id="起源"><a href="#起源" class="headerlink" title="起源"></a>起源</h2><p>想法来自于简明现代魔法网站。</p>
<p>引：简明现代魔法网站</p>
<blockquote>
<p>很多人觉得自己技术进步很慢，学习效率低，我觉得一个重要原因是看的书少了。多少是多呢？起码得看 3、4、5、6 米吧。给个具体的数量，那就 100 本书吧。很多人知识结构不好而且不系统，因为在特定领域有一个足够量的知识量+足够良好的知识结构，系统化以后就足以应对大量未曾遇到过的问题。</p>
</blockquote>
<blockquote>
<p>奉劝自学者：构建特定领域的知识结构体系的路径中再也没有比学习该专业的专业课程更好的了。如果我的知识结构体系足以囊括面试官的大部分甚至吞并他的知识结构体系的话，读到他言语中的一个词我们就已经知道他要表达什么，我们可以让他坐“上位”毕竟他是面试官，但是在知识结构体系以及心理上我们就居高临下。</p>
</blockquote>
<blockquote>
<p>所以，阅读一百本计算机著作吧，少年！</p>
</blockquote>
<p>作者的话</p>
<blockquote>
<p>操千曲而后晓声，观千剑而后识器。</p>
</blockquote>
<blockquote>
<p>博观而约取，厚积而薄发。</p>
</blockquote>
<hr>
<p>预估时间:三年<br>起始时间：2019/01/01</p>
<h2 id="书籍库"><a href="#书籍库" class="headerlink" title="书籍库"></a>书籍库</h2><h3 id="第一阶段-语言-共计-35-本"><a href="#第一阶段-语言-共计-35-本" class="headerlink" title="第一阶段 语言 共计: 35 本"></a>第一阶段 语言 共计: 35 本</h3><ul>
<li><a href="https://exploringjs.com/es6/" target="_blank" rel="noopener">《Explore ES6》</a></li>
<li><input checked="" disabled="" type="checkbox"> 《深入理解 ES6》√ (看完第一遍部分)</li>
<li><input checked="" disabled="" type="checkbox"> 《JavaScript for impatient programmers 》√ (看完预览部分)</li>
<li>《JavaScript 面向对象精要》</li>
<li>《JavaScript 忍者秘籍》</li>
<li>《JavaScript DOM 编程艺术(第 2 版)》</li>
<li>《JavaScript 高级程序设计(第 2 版)》</li>
<li>《高性能 JavaScript》</li>
<li>《高性能网站建设指南》</li>
<li><a href="http://speakingjs.com/es5/index.html" target="_blank" rel="noopener">《speaking javascript》</a></li>
<li>《High Performance Browser Networking》</li>
<li>《Effective JavaScript》</li>
<li>《JavaScript 语言精粹》</li>
<li>《JavaScript 权威指南(第 6 版)》</li>
<li>《JavaScript 设计模式与开发实践》</li>
<li>《高性能 javascript》</li>
<li>《JavaScript 函数式编程指南》</li>
<li>《现代前端技术解析》</li>
<li>《你不知道的 JavaScript(上)》</li>
<li>《你不知道的 JavaScript(中)》</li>
<li>《你不知道的 JavaScript(下)》</li>
<li>《JavaScript 面向对象编程指南（第 2 版）》</li>
<li>《精通正则表达式》</li>
<li>《Thinking in JavaScript (English Edition)》</li>
<li>《The Past, Present, and Future of JavaScript (English Edition)》</li>
<li>《Full-Stack Vue.js 2 and Laravel 5: Bring the frontend and backend together with Vue, Vuex, and Laravel (English Edition)》</li>
<li>《Learning JavaScript Data Structures and Algorithms: Write complex and powerful JavaScript code using the latest ECMAScript, 3rd Edition (English Edition)》</li>
<li>《Learning TypeScript 2.x: Develop and maintain captivating web applications with ease, 2nd Edition (English Edition) 》</li>
<li>《Eloquent JavaScript, 2nd Ed.: A Modern Introduction to Programming》</li>
<li>《Learning Vue.js 2: Learn how to build amazing and complex reactive web applications easily with Vue.js (English Edition)》</li>
<li>《Mastering TypeScript - Second Edition (English Edition)》</li>
<li>《Modern JavaScript Applications (English Edition)》</li>
<li>《Vue.js 2 Design Patterns and Best Practices: Build enterprise-ready, modular Vue.js applications with Vuex and Nuxt (English Edition)》</li>
<li>《Modular Programming with JavaScript (English Edition)》</li>
<li>《Hands-on Machine Learning with JavaScript: Solve complex computational web problems using machine learning (English Edition) 》</li>
<li>《Eloquent JavaScript, 3rd Edition: A Modern Introduction to Programming 》</li>
<li>《React 进阶之路》</li>
<li>《React 设计模式与最佳实践》</li>
<li>《深入 React 技术栈》</li>
<li>《深入浅出 React 和 Redux》</li>
<li>《React Flux webpack Babel 整合开发》</li>
</ul>
<h3 id="第二阶段-编程思想-共计-12-本"><a href="#第二阶段-编程思想-共计-12-本" class="headerlink" title="第二阶段 编程思想 共计 12 本"></a>第二阶段 编程思想 共计 12 本</h3><ul>
<li>《人月神话》</li>
<li>《编译原理(第 2 版)》</li>
<li>《代码整洁之道》</li>
<li>《计算机的构造和解释》</li>
<li>《编程之美:微软技术面试心得》</li>
<li>《算法导论》</li>
<li>《编程珠玑》</li>
<li>《软件随想录:程序员部落酋长 Joel 谈软件》</li>
<li>《代码大全》</li>
<li>《重构:改善既有代码的设计》</li>
<li>《程序员修炼之道:从小工到专家》</li>
<li>《深入理解计算机系统》</li>
<li>《高效程序员的 45 个习惯》</li>
<li>《阿里技术：不止代码》</li>
<li>《构建之法：现代软件工程》</li>
</ul>
<h3 id="第三阶段-工作与编程"><a href="#第三阶段-工作与编程" class="headerlink" title="第三阶段 工作与编程"></a>第三阶段 工作与编程</h3><p>// 项目管理类</p>
<ul>
<li>《构建之法》</li>
</ul>
<h3 id="第四阶段-底层-共计：4-本"><a href="#第四阶段-底层-共计：4-本" class="headerlink" title="第四阶段 底层 共计：4 本"></a>第四阶段 底层 共计：4 本</h3><p>// 数据结构、算法、数学之类的</p>
<ul>
<li>《学习 javascript 数据结构与算法》</li>
<li>《线性代数》</li>
<li>《深入理解计算机系统》</li>
<li>《TCP/IP 协议》</li>
<li>《剑指 offer》</li>
<li>《图解 http》</li>
</ul>
<h3 id="交叉-共计：2-本"><a href="#交叉-共计：2-本" class="headerlink" title="交叉 共计：2 本"></a>交叉 共计：2 本</h3><ul>
<li>《MySQL 必知必会》</li>
<li>《SQL 必知必会》</li>
<li>《白帽子讲 web 安全》</li>
</ul>
]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>阅读</tag>
      </tags>
  </entry>
  <entry>
    <title>git提交信息</title>
    <url>/2019/01/14/git%E6%8F%90%E4%BA%A4%E4%BF%A1%E6%81%AF/</url>
    <content><![CDATA[<h2 id="提交信息格式"><a href="#提交信息格式" class="headerlink" title="提交信息格式"></a>提交信息格式</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;type&gt;(&lt;scope&gt;): &lt;subject&gt;</span><br><span class="line">&#x2F;&#x2F; 空一行</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&#x2F;&#x2F; 空一行</span><br><span class="line">&lt;footer&gt;</span><br></pre></td></tr></table></figure>

<h3 id="type-参考"><a href="#type-参考" class="headerlink" title="type 参考"></a>type 参考</h3><p><img src="https://i.imgur.com/Rs6r9HU.png" alt="上传信息"></p>
<h3 id="scope"><a href="#scope" class="headerlink" title="scope"></a>scope</h3><p>影响的范围</p>
<h3 id="subject"><a href="#subject" class="headerlink" title="subject"></a>subject</h3><p>简短的描述</p>
<h3 id="body"><a href="#body" class="headerlink" title="body"></a>body</h3><p>具体的描述<br>多行描述用<code>- 内容</code>格式<br>如下:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- 改动1：内容</span><br><span class="line">- 改动2: 内容</span><br></pre></td></tr></table></figure>

<h3 id="footer"><a href="#footer" class="headerlink" title="footer"></a>footer</h3><p>不经常用到</p>
<h2 id="详情参考"><a href="#详情参考" class="headerlink" title="详情参考"></a>详情参考</h2><p>[1]<a href="http://www.ruanyifeng.com/blog/2016/01/commit_message_change_log.html" target="_blank" rel="noopener">commit message 和 change log 编写指南</a><br>[2]<a href="https://www.cnblogs.com/ctaodream/p/6066694.html" target="_blank" rel="noopener">老鸟都应该注意的git 提交规范</a></p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>json转Excel下载</title>
    <url>/2019/08/20/json%E8%BD%ACExcel%E4%B8%8B%E8%BD%BD/</url>
    <content><![CDATA[<h1 id="将-json-转为-excel-表并下载"><a href="#将-json-转为-excel-表并下载" class="headerlink" title="将 json 转为 excel 表并下载"></a>将 json 转为 excel 表并下载</h1><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>通过访问接口，获取 json 数据，将 json 转为 excel 表并下载。</p>
<h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><ul>
<li>react</li>
<li>js-xlsx</li>
</ul>
<h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><h3 id="安装-jsx-xlsx-包"><a href="#安装-jsx-xlsx-包" class="headerlink" title="安装 jsx-xlsx 包"></a>安装 jsx-xlsx 包</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">npm i js-xlsx -S</span><br></pre></td></tr></table></figure>

<h3 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> XLSX = <span class="built_in">require</span>(<span class="string">"xlsx"</span>);</span><br></pre></td></tr></table></figure>

<h3 id="实现效果"><a href="#实现效果" class="headerlink" title="实现效果"></a>实现效果</h3><p>假设我们从后端返回的数据如下:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">student: [</span><br><span class="line">  &#123;</span><br><span class="line">    id: <span class="number">1</span>,</span><br><span class="line">    stuNo: <span class="number">20190801</span>,</span><br><span class="line">    name: <span class="string">"王二二"</span>,</span><br><span class="line">    age: <span class="number">21</span>,</span><br><span class="line">    major: <span class="string">"计算机科学与技术"</span>,</span><br><span class="line">    isParty: <span class="number">1</span>,</span><br><span class="line">    sex: <span class="number">0</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    id: <span class="number">2</span>,</span><br><span class="line">    stuNo: <span class="number">20190802</span>,</span><br><span class="line">    name: <span class="string">"李冬梅"</span>,</span><br><span class="line">    age: <span class="number">20</span>,</span><br><span class="line">    major: <span class="string">"计算机科学与技术"</span>,</span><br><span class="line">    isParty: <span class="number">0</span>,</span><br><span class="line">    sex: <span class="number">1</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    id: <span class="number">3</span>,</span><br><span class="line">    stuNo: <span class="number">20190803</span>,</span><br><span class="line">    name: <span class="string">"张晓芳"</span>,</span><br><span class="line">    age: <span class="number">21</span>,</span><br><span class="line">    major: <span class="string">"汉语言文学"</span>,</span><br><span class="line">    isParty: <span class="number">1</span>,</span><br><span class="line">    sex: <span class="number">1</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    id: <span class="number">4</span>,</span><br><span class="line">    stuNo: <span class="number">20190804</span>,</span><br><span class="line">    name: <span class="string">"张雨"</span>,</span><br><span class="line">    age: <span class="number">24</span>,</span><br><span class="line">    major: <span class="string">"汉语言文学"</span>,</span><br><span class="line">    isParty: <span class="number">1</span>,</span><br><span class="line">    sex: <span class="number">0</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    id: <span class="number">5</span>,</span><br><span class="line">    stuNo: <span class="number">20190805</span>,</span><br><span class="line">    name: <span class="string">"张子豪"</span>,</span><br><span class="line">    age: <span class="number">22</span>,</span><br><span class="line">    major: <span class="string">"通信工程"</span>,</span><br><span class="line">    isParty: <span class="number">0</span>,</span><br><span class="line">    sex: <span class="number">0</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">];</span><br></pre></td></tr></table></figure>

<h4 id="数据含义说明"><a href="#数据含义说明" class="headerlink" title="数据含义说明"></a>数据含义说明</h4><table>
<thead>
<tr>
<th>属性名称</th>
<th>中文含义</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td>id</td>
<td>id</td>
<td></td>
</tr>
<tr>
<td>stuNo</td>
<td>学号</td>
<td>8 位</td>
</tr>
<tr>
<td>name</td>
<td>名字</td>
<td></td>
</tr>
<tr>
<td>age</td>
<td>年龄</td>
<td></td>
</tr>
<tr>
<td>major</td>
<td>专业</td>
<td></td>
</tr>
<tr>
<td>isParty</td>
<td>是否是党员</td>
<td>否:0,是:1</td>
</tr>
<tr>
<td>sex</td>
<td>性别</td>
<td>男:0, 女:1</td>
</tr>
</tbody></table>
<p>最终想要实现的效果如下:</p>
<p><img src="http://ytju2r.coding-pages.com/%E5%8E%9F%E5%A7%8B%E8%A1%A8%E6%A0%BC.png" alt="实现效果"></p>
<h3 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h3><p>因为 js-xlsx 对应的数据组合如下:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">    [<span class="string">'行1列1(表头)'</span>,<span class="string">'行1列1(表头2)'</span>,<span class="string">'行1列1(表3)'</span>],</span><br><span class="line">    [<span class="string">'行2列1'</span>,<span class="string">'行2列2'</span>,<span class="string">'行2列3'</span>],</span><br><span class="line">    [<span class="string">'行3列1'</span>,<span class="string">'行3列2'</span>,<span class="string">'行3列3'</span>]</span><br><span class="line">    .....</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>所以我们需要将数据进行组合</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//	置换数据，将是否党员的0和1换成是和否;将性别中的0和1换成'男'和'女'</span></span><br><span class="line">assembleStudentData(data) &#123;</span><br><span class="line">    data = <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(data));</span><br><span class="line">    <span class="keyword">return</span> data.map(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>) </span>&#123;</span><br><span class="line">        item.isParty = item.isParty === <span class="number">0</span> ? <span class="string">'否'</span> : <span class="string">'是'</span>;</span><br><span class="line">        item.sex = item.sex === <span class="number">0</span> ? <span class="string">'男'</span> : <span class="string">'女'</span>;</span><br><span class="line">        <span class="keyword">return</span> item;</span><br><span class="line">        &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//	转换数据的格式</span></span><br><span class="line">transferTableData(arr) &#123;</span><br><span class="line">  <span class="keyword">const</span> tableData = arr.map(<span class="function"><span class="keyword">function</span>(<span class="params">obj, arrIndex</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> row = [];</span><br><span class="line">    <span class="built_in">Object</span>.keys(obj).forEach(<span class="function"><span class="keyword">function</span>(<span class="params">key</span>) </span>&#123;</span><br><span class="line">      row.push(obj[key]);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> row;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> tableData;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>组合之后，使用 xlxs 转换为 excel 表并提供下载即可。</p>
<h2 id="合并单元格"><a href="#合并单元格" class="headerlink" title="合并单元格"></a>合并单元格</h2><blockquote>
<p>只涉及列合并</p>
</blockquote>
<p>如果我们想将上下相邻且单元格合并，那么需要操作 sheet[‘!merges’]属性。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">!merges :[</span><br><span class="line">    		&#123; <span class="attr">s</span>: &#123; <span class="attr">r</span>: <span class="number">-1</span>, <span class="attr">c</span>: <span class="number">-1</span> &#125;, <span class="attr">e</span>: &#123; <span class="attr">r</span>: <span class="number">-1</span>, <span class="attr">c</span>: <span class="number">-1</span> &#125; &#125;,</span><br><span class="line">          	&#123; <span class="attr">s</span>: &#123; <span class="attr">r</span>: <span class="number">-1</span>, <span class="attr">c</span>: <span class="number">-1</span> &#125;, <span class="attr">e</span>: &#123; <span class="attr">r</span>: <span class="number">-1</span>, <span class="attr">c</span>: <span class="number">-1</span> &#125; &#125;</span><br><span class="line">          ];</span><br></pre></td></tr></table></figure>

<p>!merges 属性说明</p>
<ul>
<li><p>s: start 开始位置</p>
</li>
<li><p>r: row 行</p>
</li>
<li><p>c: column 列</p>
</li>
</ul>
<p>!merges 中的每一个元素表示的是合并的位置。合并的位置由两部分组成，一部分是合并开始的位置{s:{r:-1,c:-1}};</p>
<p>另一部分是合并结束的位置{e:{r:-1,c:-1}}。如假如有一组元素 <code>[{s:{r:1,c:1}},{e:{r:3,c:1}}]</code>表示的是合并第二列、第二行至第四行的数据</p>
<p>首先经过转换，我们的数据应该如下，拿到这个数组。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">  [<span class="number">1</span>, <span class="number">20190801</span>, <span class="string">"王二二"</span>, <span class="number">21</span>, <span class="string">"计算机科学与技术"</span>, <span class="string">"是"</span>, <span class="string">"男"</span>],</span><br><span class="line">  [<span class="number">2</span>, <span class="number">20190802</span>, <span class="string">"李冬梅"</span>, <span class="number">20</span>, <span class="string">"计算机科学与技术"</span>, <span class="string">"否"</span>, <span class="string">"女"</span>],</span><br><span class="line">  [<span class="number">3</span>, <span class="number">20190803</span>, <span class="string">"张晓芳"</span>, <span class="number">21</span>, <span class="string">"汉语言文学"</span>, <span class="string">"是"</span>, <span class="string">"女"</span>],</span><br><span class="line">  [<span class="number">4</span>, <span class="number">20190804</span>, <span class="string">"张雨"</span>, <span class="number">24</span>, <span class="string">"汉语言文学"</span>, <span class="string">"是"</span>, <span class="string">"男"</span>],</span><br><span class="line">  [<span class="number">5</span>, <span class="number">20190805</span>, <span class="string">"张子豪"</span>, <span class="number">22</span>, <span class="string">"通信工程"</span>, <span class="string">"否"</span>, <span class="string">"男"</span>],</span><br><span class="line">];</span><br></pre></td></tr></table></figure>

<p>找出上下相邻并相等的数据，记录下来</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Note:记录数组中上下相等且连续的元素开始位置和结束位置</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;array&#125;</span> </span>data 用来记录的数组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;array&#125;</span> </span>allPos 所有记录的位置</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@note </span>循环数组，循环数组的每一行元素，如果当前行的元素与下一行的元素相等，那么将其记录加一；如果不相等*    并且存在记录，那么将该纪录弹出，存入所有位置数组中。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@note </span>弹出时位置的计算方法 列 = 当前元素所在列 开始行 = 当前元素所在行 - 记录中的数 结束行=当前行</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@note </span>所有记录默认为0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">getMergeData(data) &#123;</span><br><span class="line">  <span class="keyword">let</span> sameValue = data[<span class="number">0</span>].map(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">let</span> allPos = [];</span><br><span class="line">  <span class="keyword">let</span> pos = &#123; <span class="attr">s</span>: &#123; <span class="attr">r</span>: <span class="number">-1</span>, <span class="attr">c</span>: <span class="number">-1</span> &#125;, <span class="attr">e</span>: &#123; <span class="attr">r</span>: <span class="number">-1</span>, <span class="attr">c</span>: <span class="number">-1</span> &#125; &#125;;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; data.length; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; data[i].length; j++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (i &lt; data.length - <span class="number">1</span> &amp;&amp; data[i][j] === data[i + <span class="number">1</span>][j]) &#123;</span><br><span class="line">        sameValue[j] = sameValue[j] + <span class="number">1</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (sameValue[j] !== <span class="number">0</span>) &#123;</span><br><span class="line">          pos[<span class="string">'s'</span>][<span class="string">'c'</span>] = j;</span><br><span class="line">          pos[<span class="string">'e'</span>][<span class="string">'c'</span>] = j;</span><br><span class="line">          pos[<span class="string">'s'</span>][<span class="string">'r'</span>] = i - sameValue[j];</span><br><span class="line">          pos[<span class="string">'e'</span>][<span class="string">'r'</span>] = i;</span><br><span class="line">          <span class="keyword">const</span> samePos = <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(pos));</span><br><span class="line">          allPos.push(samePos);</span><br><span class="line">          sameValue[j] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> allPos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>给工作表加上!merge 属性</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> merges = <span class="keyword">this</span>.getMergeData(studentTable);</span><br><span class="line"><span class="keyword">if</span> (!sheet[<span class="string">"!merges"</span>]) &#123;</span><br><span class="line">  sheet[<span class="string">"!merges"</span>] = [];</span><br><span class="line">&#125;</span><br><span class="line">sheet[<span class="string">"!merges"</span>] = merges;</span><br></pre></td></tr></table></figure>

<p>合并效果：</p>
<p><img src="http://ytju2r.coding-pages.com/%E5%90%88%E5%B9%B6%E5%90%8E%E6%95%88%E6%9E%9C.png" alt="合并后表格"></p>
<h3 id="全部代码"><a href="#全部代码" class="headerlink" title="全部代码"></a>全部代码</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">  <span class="keyword">super</span>(props);</span><br><span class="line">  <span class="keyword">this</span>.exportExcel = <span class="keyword">this</span>.exportExcel.bind(<span class="keyword">this</span>);</span><br><span class="line">  <span class="keyword">this</span>.state = &#123;</span><br><span class="line">    student: [</span><br><span class="line">      &#123;</span><br><span class="line">        id: <span class="number">1</span>,</span><br><span class="line">        stuNo: <span class="number">20190801</span>,</span><br><span class="line">        name: <span class="string">'王二二'</span>,</span><br><span class="line">        age: <span class="number">21</span>,</span><br><span class="line">        major: <span class="string">'计算机科学与技术'</span>,</span><br><span class="line">        isParty: <span class="number">1</span>,</span><br><span class="line">        sex: <span class="number">0</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        id: <span class="number">2</span>,</span><br><span class="line">        stuNo: <span class="number">20190802</span>,</span><br><span class="line">        name: <span class="string">'李冬梅'</span>,</span><br><span class="line">        age: <span class="number">20</span>,</span><br><span class="line">        major: <span class="string">'计算机科学与技术'</span>,</span><br><span class="line">        isParty: <span class="number">0</span>,</span><br><span class="line">        sex: <span class="number">1</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        id: <span class="number">3</span>,</span><br><span class="line">        stuNo: <span class="number">20190803</span>,</span><br><span class="line">        name: <span class="string">'张晓芳'</span>,</span><br><span class="line">        age: <span class="number">21</span>,</span><br><span class="line">        major: <span class="string">'汉语言文学'</span>,</span><br><span class="line">        isParty: <span class="number">1</span>,</span><br><span class="line">        sex: <span class="number">1</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        id: <span class="number">4</span>,</span><br><span class="line">        stuNo: <span class="number">20190804</span>,</span><br><span class="line">        name: <span class="string">'张雨'</span>,</span><br><span class="line">        age: <span class="number">24</span>,</span><br><span class="line">        major: <span class="string">'汉语言文学'</span>,</span><br><span class="line">        isParty: <span class="number">1</span>,</span><br><span class="line">        sex: <span class="number">0</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        id: <span class="number">5</span>,</span><br><span class="line">        stuNo: <span class="number">20190805</span>,</span><br><span class="line">        name: <span class="string">'张子豪'</span>,</span><br><span class="line">        age: <span class="number">22</span>,</span><br><span class="line">        major: <span class="string">'通信工程'</span>,</span><br><span class="line">        isParty: <span class="number">0</span>,</span><br><span class="line">        sex: <span class="number">0</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">render() &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;button onClick=&#123;<span class="keyword">this</span>.exportExcel&#125;&gt;导出表格&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//  组合student数据</span></span><br><span class="line">assembleStudentData(data) &#123;</span><br><span class="line">  data = <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(data));</span><br><span class="line">  <span class="keyword">return</span> data.map(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>) </span>&#123;</span><br><span class="line">    item.isParty = item.isParty === <span class="number">0</span> ? <span class="string">'否'</span> : <span class="string">'是'</span>;</span><br><span class="line">    item.sex = item.sex === <span class="number">0</span> ? <span class="string">'男'</span> : <span class="string">'女'</span>;</span><br><span class="line">    <span class="keyword">return</span> item;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//  导出excel</span></span><br><span class="line">exportExcel() &#123;</span><br><span class="line">  <span class="keyword">const</span> student = <span class="keyword">this</span>.assembleStudentData(<span class="keyword">this</span>.state.student);</span><br><span class="line">  <span class="keyword">let</span> studentTable = <span class="keyword">this</span>.transferTableData(student);</span><br><span class="line">  studentTable.unshift([<span class="string">'#'</span>, <span class="string">'Id'</span>, <span class="string">'姓名'</span>, <span class="string">'年龄'</span>, <span class="string">'专业'</span>, <span class="string">'是否党员'</span>, <span class="string">'性别'</span>]);</span><br><span class="line">  <span class="keyword">const</span> sheet = XLSX.utils.aoa_to_sheet(studentTable);</span><br><span class="line">  <span class="keyword">let</span> merges = <span class="keyword">this</span>.getMergeData(studentTable);</span><br><span class="line">  <span class="keyword">if</span> (!sheet[<span class="string">'!merges'</span>]) &#123;</span><br><span class="line">    sheet[<span class="string">'!merges'</span>] = [];</span><br><span class="line">  &#125;</span><br><span class="line">  sheet[<span class="string">'!merges'</span>] = merges;</span><br><span class="line">  <span class="keyword">this</span>.openDownloadDialog(<span class="keyword">this</span>.sheet2blob(sheet), <span class="string">'student.xlsx'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Note:记录数组中上下相等且连续的元素开始位置和结束位置</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;array&#125;</span> </span>data 用来记录的数组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;boolean&#125;</span> </span>needHeader 是否需要表头（如果需要表头，弹出时将记录中所有元素的行数加一，防止表头与第一行内容相同的情况）</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;array&#125;</span> </span>allPos 所有记录的位置</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@note </span>循环数组，循环数组的每一行元素，如果当前行的元素与下一行的元素相等，那么将其记录加一；如果不相等并且存在记录，那么将该纪录弹         出，存入所有位置数组中。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@note </span>弹出时位置的计算方法 列 = 当前元素所在列 开始行 = 当前元素所在行 - 记录中的数 结束行=当前行</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@note </span>所有记录默认为0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">getMergeData(data) &#123;</span><br><span class="line">  <span class="keyword">let</span> sameValue = data[<span class="number">0</span>].map(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">let</span> allPos = [];</span><br><span class="line">  <span class="keyword">let</span> pos = &#123; <span class="attr">s</span>: &#123; <span class="attr">r</span>: <span class="number">-1</span>, <span class="attr">c</span>: <span class="number">-1</span> &#125;, <span class="attr">e</span>: &#123; <span class="attr">r</span>: <span class="number">-1</span>, <span class="attr">c</span>: <span class="number">-1</span> &#125; &#125;;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; data.length; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; data[i].length; j++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (i &lt; data.length - <span class="number">1</span> &amp;&amp; data[i][j] === data[i + <span class="number">1</span>][j]) &#123;</span><br><span class="line">        sameValue[j] = sameValue[j] + <span class="number">1</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (sameValue[j] !== <span class="number">0</span>) &#123;</span><br><span class="line">          pos[<span class="string">'s'</span>][<span class="string">'c'</span>] = j;</span><br><span class="line">          pos[<span class="string">'e'</span>][<span class="string">'c'</span>] = j;</span><br><span class="line">          pos[<span class="string">'s'</span>][<span class="string">'r'</span>] = i - sameValue[j];</span><br><span class="line">          pos[<span class="string">'e'</span>][<span class="string">'r'</span>] = i;</span><br><span class="line">          <span class="keyword">const</span> samePos = <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(pos));</span><br><span class="line">          allPos.push(samePos);</span><br><span class="line">          sameValue[j] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> allPos;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//	转换数据</span></span><br><span class="line">transferTableData(arr) &#123;</span><br><span class="line">  <span class="keyword">const</span> tableData = arr.map(<span class="function"><span class="keyword">function</span>(<span class="params">obj, arrIndex</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> row = [];</span><br><span class="line">    <span class="built_in">Object</span>.keys(obj).forEach(<span class="function"><span class="keyword">function</span>(<span class="params">key</span>) </span>&#123;</span><br><span class="line">      row.push(obj[key]);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> row;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> tableData;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//	打开下载对话框</span></span><br><span class="line">openDownloadDialog(url, saveName) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> url == <span class="string">'object'</span> &amp;&amp; url <span class="keyword">instanceof</span> Blob) &#123;</span><br><span class="line">    url = URL.createObjectURL(url);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> aLink = <span class="built_in">document</span>.createElement(<span class="string">'a'</span>);</span><br><span class="line">  aLink.href = url;</span><br><span class="line">  aLink.download = saveName || <span class="string">''</span>;</span><br><span class="line">  <span class="keyword">var</span> event;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">window</span>.MouseEvent) event = <span class="keyword">new</span> MouseEvent(<span class="string">'click'</span>);</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    event = <span class="built_in">document</span>.createEvent(<span class="string">'MouseEvents'</span>);</span><br><span class="line">    event.initMouseEvent(<span class="string">'click'</span>, <span class="literal">true</span>, <span class="literal">false</span>, <span class="built_in">window</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="number">0</span>, <span class="literal">null</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  aLink.dispatchEvent(event);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 将workbook装化成blob对象</span></span><br><span class="line">sheet2blob(sheet, sheetName) &#123;</span><br><span class="line">  sheetName = sheetName || <span class="string">'sheet1'</span>;</span><br><span class="line">  <span class="keyword">var</span> workbook = &#123;</span><br><span class="line">    SheetNames: [sheetName],</span><br><span class="line">    Sheets: &#123;&#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  workbook.Sheets[sheetName] = sheet;</span><br><span class="line">  <span class="comment">// 生成excel的配置项</span></span><br><span class="line">  <span class="keyword">var</span> wopts = &#123;</span><br><span class="line">    bookType: <span class="string">'xlsx'</span>, <span class="comment">// 要生成的文件类型</span></span><br><span class="line">    bookSST: <span class="literal">false</span>, <span class="comment">// 是否生成Shared String Table，官方解释是，如果开启生成速度会下降，但在低版本IOS设备上有更好的兼容性</span></span><br><span class="line">    type: <span class="string">'binary'</span></span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">var</span> wbout = XLSX.write(workbook, wopts);</span><br><span class="line">  <span class="keyword">var</span> blob = <span class="keyword">new</span> Blob([s2ab(wbout)], &#123; <span class="attr">type</span>: <span class="string">'application/octet-stream'</span> &#125;);</span><br><span class="line">  <span class="comment">// 字符串转ArrayBuffer</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">s2ab</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> buf = <span class="keyword">new</span> <span class="built_in">ArrayBuffer</span>(s.length);</span><br><span class="line">    <span class="keyword">var</span> view = <span class="keyword">new</span> <span class="built_in">Uint8Array</span>(buf);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i != s.length; ++i) view[i] = s.charCodeAt(i) &amp; <span class="number">0xff</span>;</span><br><span class="line">    <span class="keyword">return</span> buf;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> blob;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> app = <span class="built_in">document</span>.getElementById(<span class="string">'app'</span>);</span><br><span class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">Page</span> /&gt;</span></span>, app);</span><br></pre></td></tr></table></figure>

<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>将 json 数据转为字符串，最后组合成 csv 文件下载。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> data = <span class="string">"..."</span>; <span class="comment">// 这里填CSV内容的字符串</span></span><br><span class="line"><span class="keyword">const</span> blob = <span class="keyword">new</span> Blob([data], &#123; <span class="attr">type</span>: <span class="string">"text/plain"</span> &#125;);</span><br><span class="line"><span class="keyword">const</span> link = <span class="built_in">document</span>.createElement(<span class="string">"a"</span>);</span><br><span class="line">link.href = URL.createObjectURL(blob);</span><br><span class="line">link.download = <span class="string">"filename.csv"</span>; <span class="comment">// 这里填保存成的文件名</span></span><br><span class="line">link.click();</span><br><span class="line">URL.revokeObjectURL(link.href);</span><br></pre></td></tr></table></figure>

<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://github.com/SheetJS/js-xlsx" target="_blank" rel="noopener">SheetJS/js-xlsx: SheetJS Community Edition – Spreadsheet Toolkit</a></p>
<p><a href="http://blog.haoji.me/js-excel.html" target="_blank" rel="noopener">如何使用 JavaScript 实现纯前端读取和导出 excel 文件-好记的博客如何使用 JavaScript 实现纯前端读取和导出 excel 文件-好记的博客</a></p>
]]></content>
  </entry>
  <entry>
    <title>vuex的简单理解</title>
    <url>/2019/01/18/vuex%E7%9A%84%E7%AE%80%E5%8D%95%E7%90%86%E8%A7%A3/</url>
    <content><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><h3 id="什么是-vuex"><a href="#什么是-vuex" class="headerlink" title="什么是 vuex"></a>什么是 vuex</h3><p>vuex 是一种状态管理模式，或者说我们可以称其为数据中心。</p>
<h3 id="为什么使用-vuex"><a href="#为什么使用-vuex" class="headerlink" title="为什么使用 vuex"></a>为什么使用 vuex</h3><p>这就相当于一个集团，集团下有很多下属公司。下属公司大了之后，有些事务可能是需要集团总部集中处理，以便提高效率，降低人员冗余。vuex 就是相当于这个中央数据处理部门。我们可以把 vuex 看做总部集团保存的各下属公司都可能用到的数据。</p>
<h3 id="何时使用-vuex"><a href="#何时使用-vuex" class="headerlink" title="何时使用 vuex"></a>何时使用 vuex</h3><p>相对于本地组件直接调用数据而言，vuex 操作更加复杂，而且也意味着额外的一些开销。</p>
<h4 id="vuex-的替代方案"><a href="#vuex-的替代方案" class="headerlink" title="vuex 的替代方案"></a>vuex 的替代方案</h4><ul>
<li>props</li>
<li>provide/inject</li>
<li>Portals/ Portal-Vue<br>参照以下文档:<br><img src="https://i.imgur.com/1dvo9IK.png" alt="何时使用vuex"></li>
</ul>
<h2 id="安装-vuex"><a href="#安装-vuex" class="headerlink" title="安装 vuex"></a>安装 vuex</h2><p><code>npm install vuex --save</code></p>
<h2 id="建立一个-vuex"><a href="#建立一个-vuex" class="headerlink" title="建立一个 vuex"></a>建立一个 vuex</h2><ol>
<li>在入口文件<code>main.js</code>中引入并使用</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import Vuex from &#39;vuex&#39;</span><br><span class="line">Vue.use(Vuex)</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>按照 vuex 的模式建立一个文件<br>文件:<code>src/store/store.js</code></li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import Vue from &#39;vue&#39;;</span><br><span class="line">import Vuex from &#39;vuex&#39;;</span><br><span class="line"></span><br><span class="line">Vue.use(Vuex)</span><br><span class="line"></span><br><span class="line">const state &#x3D; &#123;&#125;</span><br><span class="line">const getters &#x3D; &#123;&#125;</span><br><span class="line">const mutations &#x3D; &#123;&#125;</span><br><span class="line">const actions &#x3D; &#123;&#125;</span><br><span class="line"></span><br><span class="line">export default new Vuex.Store(&#123;</span><br><span class="line">  state,</span><br><span class="line">  mutations,</span><br><span class="line">  actions,</span><br><span class="line">  getters</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>将 store 文件挂载在 vue 实例下</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">new Vue(&#123;</span><br><span class="line">  store,</span><br><span class="line">  el: &#39;#app&#39;,</span><br><span class="line">  router,</span><br><span class="line">  components: &#123; App &#125;,</span><br><span class="line">  template: &#39;&lt;App&#x2F;&gt;&#39;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="vuex-中的四个概念"><a href="#vuex-中的四个概念" class="headerlink" title="vuex 中的四个概念"></a>vuex 中的四个概念</h2><blockquote>
<p>vuex 中有四个概念：state、mutations、getters、actions。我们可以想象为这是总公司管理公共数据的一个部门，这个部门执行的严格管理的策略。state,代表的是这个部门管理的公共数据;mutations:对内事务管理部，修改 state，由 mutations 执行，也就是时候，要修改 state，必须经过 mutations；getters:对外输送数据部门，只输送数据，不进行其他操作;actions,中心事件,可存储中心事件，也可调用内部事件，也就是说，要进行内部事件的调用，必须由 actions 对接。</p>
</blockquote>
<h3 id="state"><a href="#state" class="headerlink" title="state"></a>state</h3><p>存储一个中心数据</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const state &#x3D; &#123;</span><br><span class="line">  count:0</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="mutations"><a href="#mutations" class="headerlink" title="mutations"></a>mutations</h3><p>修改一个中心数据</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const mutations &#x3D; &#123;</span><br><span class="line">	add()&#123;</span><br><span class="line">		++ state.count;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="getters"><a href="#getters" class="headerlink" title="getters"></a>getters</h3><p>向模板返回一个中心数据，类似于 computed<br>格式:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const getters &#x3D; &#123;</span><br><span class="line">  DataName(state) &#123;</span><br><span class="line">    return state.DataName;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>举例:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const getters &#x3D; &#123;</span><br><span class="line">  count(state) &#123;</span><br><span class="line">    return state.count;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="actions"><a href="#actions" class="headerlink" title="actions"></a>actions</h3><p>编写一个内部事件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const actions &#x3D; &#123;</span><br><span class="line">  alertOne () &#123;</span><br><span class="line">    alert(&#39;1&#39;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>调用内部事件并向模板返回，通过<code>commit</code>通行证<br>格式</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const actions &#x3D; &#123;</span><br><span class="line">  actionName(&#123; commit &#125;) &#123;</span><br><span class="line">    commit([mutationName]);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const actions &#x3D; &#123;</span><br><span class="line">  add (&#123; commit &#125;) &#123;</span><br><span class="line">    commit(&#39;addAge&#39;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="子部门和中心部门通信"><a href="#子部门和中心部门通信" class="headerlink" title="子部门和中心部门通信"></a>子部门和中心部门通信</h3><p>我们通过对外的部门获得 vuex 存储的中心数据和操作中心事件</p>
<ol>
<li>在 componnets 文件中导入</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &#123; mapGetters &#125; from &#39;vuex&#39;;</span><br><span class="line">computed: mapGetters([&#39;person&#39;])</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>在 computed 中返回中心数据，在 methods 中返回中心事件</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">methods: &#123;...mapActions([&#39;add&#39;])&#125;,</span><br><span class="line">computed: &#123;...mapGetters([&#39;count&#39;])&#125;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>在模板中调用</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">计数:&#123;&#123;count&#125;&#125;</span><br><span class="line">&lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;增加&quot; @click&#x3D;&quot;add&quot;&gt;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>总结</li>
</ol>
<ul>
<li>获取中心数据:Module –&gt; Getters –&gt; State</li>
<li>操作中心数据:Module –&gt; Actions –&gt; Mutations –&gt; State</li>
</ul>
<h2 id="vuex-实例"><a href="#vuex-实例" class="headerlink" title="vuex 实例"></a>vuex 实例</h2><h3 id="计数器"><a href="#计数器" class="headerlink" title="计数器"></a>计数器</h3><ul>
<li>工具:npm/cnpm/nodejs,</li>
<li>此处为 cnpm 安装 cnpm `npm install -g cnpm –registry=<a href="https://registry.npm.taobao.org" target="_blank" rel="noopener">https://registry.npm.taobao.org</a></li>
</ul>
<ol>
<li>安装 vue-cli<br><code>cnpm install vue-cli -g</code></li>
<li>利用 webpack 生成一个 vue 项目，名称为 vuex-test<br><code>vue init webpack vuex-test</code></li>
<li>进入 vuex-test 并运行查看</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd vuex-test</span><br><span class="line">cnpm run dev</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>安装 vuex 并在入口文件 main.js 中引入</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;  命令行</span><br><span class="line">npm install vuex --save</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;  main.js</span><br><span class="line">import Vuex from &#39;vuex&#39;</span><br><span class="line">Vue.use(Vuex)</span><br></pre></td></tr></table></figure>

<ol start="5">
<li>新建一个<code>vuex-test/src/store/index.js</code>文件</li>
<li>根据 store 模板写入 index.js 文件</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import Vue from &#39;vue&#39;;</span><br><span class="line">import Vuex from &#39;vuex&#39;;</span><br><span class="line"></span><br><span class="line">Vue.use(Vuex)</span><br><span class="line"></span><br><span class="line">const state &#x3D; &#123;&#125;</span><br><span class="line">const getters &#x3D; &#123;&#125;</span><br><span class="line">const mutations &#x3D; &#123;&#125;</span><br><span class="line">const actions &#x3D; &#123;&#125;</span><br><span class="line"></span><br><span class="line">export default new Vuex.Store(&#123;</span><br><span class="line">  state,</span><br><span class="line">  mutations,</span><br><span class="line">  actions,</span><br><span class="line">  getters</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<ol start="7">
<li>在<code>main.js</code>中引入并将其挂载在 vuex 下</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import store from &#39;.&#x2F;store&#x2F;index&#39;</span><br><span class="line">new Vue(&#123;</span><br><span class="line">  store,</span><br><span class="line">  el: &#39;#app&#39;,</span><br><span class="line">  router,</span><br><span class="line">  components: &#123; App &#125;,</span><br><span class="line">  template: &#39;&lt;App&#x2F;&gt;&#39;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<ol start="8">
<li>在<code>store.js</code>中声明一个数据<code>count</code>,并为其写一个内部操作事件和外部调用事件</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;  声明count</span><br><span class="line">const state &#x3D; &#123;</span><br><span class="line">  count: 0</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;  内部操作事件</span><br><span class="line">addCount (state, n) &#123;</span><br><span class="line">    let addNum &#x3D; parseInt(n)</span><br><span class="line">    state.count +&#x3D; addNum</span><br><span class="line">  &#125;</span><br><span class="line">&#x2F;&#x2F; 外部调用事件</span><br><span class="line">const actions &#x3D; &#123;</span><br><span class="line">  addCount (&#123; commit &#125;, addNum) &#123;</span><br><span class="line">    commit(&#39;addCount&#39;, addNum)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="9">
<li>新建<code>src/components/add-count.vue</code></li>
<li>在<code>add-count</code>文件中写入以下内容</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;hello&quot;&gt;</span><br><span class="line">    请输入一个数:&lt;input type&#x3D;&quot;text&quot;</span><br><span class="line">      v-model&#x3D;&quot;addNum&quot;&gt;&lt;button @click&#x3D;&quot;addCount(addNum)&quot;&gt;增加&lt;&#x2F;button&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123; mapActions &#125; from &#39;vuex&#39;;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#39;HelloWorld&#39;,</span><br><span class="line">  data () &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      addNum: null</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    ...mapActions([&#39;addCount&#39;])</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- Add &quot;scoped&quot; attribute to limit CSS to this component only --&gt;</span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure>

<ol start="11">
<li>在<code>HelloWorld</code>文件中调用<code>add-count.vue</code>文件。<br>写入以下内容</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;hello&quot;&gt;</span><br><span class="line">    &lt;add-count&gt;&lt;&#x2F;add-count&gt;</span><br><span class="line">    总数:&#123;&#123;count&#125;&#125;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123; mapGetters &#125; from &#39;vuex&#39;;</span><br><span class="line">import AddCount from &#39;.&#x2F;add-count&#39;;</span><br><span class="line">export default &#123;</span><br><span class="line">  components: &#123;</span><br><span class="line">    AddCount</span><br><span class="line">  &#125;,</span><br><span class="line">  name: &#39;HelloWorld&#39;,</span><br><span class="line">  data () &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      msg: &#39;Welcome to Your Vue.js App&#39;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  computed: &#123; ...mapGetters([&#39;count&#39;]) &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- Add &quot;scoped&quot; attribute to limit CSS to this component only --&gt;</span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure>

<ol start="12">
<li>效果</li>
</ol>
<p><img src="https://i.imgur.com/gHF9WZj.gif" alt="addCount"></p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>[1]<a href="https://vuex.vuejs.org/zh/" target="_blank" rel="noopener">vuex 是什么？ | vuex</a></p>
<p>[2]<a href="https://markus.oberlehner.net/blog/should-i-store-this-data-in-vuex/" target="_blank" rel="noopener">should i store this data in vuex? - markus oberlehner</a></p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>vuex</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Fiddler抓取微信饿了么小程序数据</title>
    <url>/2019/09/14/%E4%BD%BF%E7%94%A8Fiddler%E6%8A%93%E5%8F%96%E5%BE%AE%E4%BF%A1%E9%A5%BF%E4%BA%86%E4%B9%88%E5%B0%8F%E7%A8%8B%E5%BA%8F%E6%95%B0%E6%8D%AE/</url>
    <content><![CDATA[<h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><ul>
<li>一部装载 Android 7.0 以下的手机：此处使用华为荣耀 5x</li>
<li>微信小程序 7.0 以下版本:此处为 6.6.7。此处可通过豌豆荚应用下载。</li>
<li>安装好的 Fiddler 软件</li>
<li>良好的<code>wifi</code></li>
</ul>
<h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><ol>
<li><p>将手机号电脑连接至同一<code>wifi</code></p>
</li>
<li><p>配置 Fiddler</p>
<p><img src="http://ytju2r.coding-pages.com//general.png" alt="general配置"></p>
</li>
</ol>
<p><img src="http://ytju2r.coding-pages.com//https.png" alt="https配置"></p>
<p><img src="http://ytju2r.coding-pages.com/connections.png" alt="connections配置"></p>
<ol start="3">
<li><p>手机 wifi 设置代理</p>
<p>（1）选择当前连接的 wifi，进入修改 wifi</p>
<p>（2）主机名为电脑的 ip 地址，通过<code>ipconfig</code>可以查看到</p>
<p>（3）端口为 connections 中设置的端口号</p>
</li>
</ol>
<p><img src="http://ytju2r.coding-pages.com//wifi%E9%85%8D%E7%BD%AE.png" alt="wifi配置"></p>
<ol start="4">
<li><p>手机安装证书</p>
<p>（1）电脑打开 Fiddler 软件之后，使用手机访问<code>主机名:端口号</code>,将进入 fiddler 证书下载页面，点击下载证书</p>
<p><img src="http://ytju2r.coding-pages.com//fiddler%E8%AF%81%E4%B9%A6.png" alt="fiddler证书"></p>
</li>
</ol>
<p>（2）手机进入 wifi 高级设置，选择安装证书</p>
<p><img src="http://ytju2r.coding-pages.com/%E5%AE%89%E8%A3%85%E8%AF%81%E4%B9%A61.png" alt="安装证书1"></p>
<p>（3）选择下载证书所在位置，选择用途为 vpn 和应用</p>
<p><img src="http://ytju2r.coding-pages.com/%E5%AE%89%E8%A3%85%E8%AF%81%E4%B9%A62.png" alt="安装证书2"></p>
<ol start="5">
<li>打开微信小程序饿了么，即可抓取数据</li>
</ol>
<p><img src="http://ytju2r.coding-pages.com/%E9%A5%BF%E4%BA%86%E4%B9%88.png" alt="饿了么数据"></p>
<h2 id="Q-A"><a href="#Q-A" class="headerlink" title="Q-A"></a>Q-A</h2><h3 id="为什么要使用-Android-7-0-以下的手机和-7-0-以下的微信小程序版本？"><a href="#为什么要使用-Android-7-0-以下的手机和-7-0-以下的微信小程序版本？" class="headerlink" title="为什么要使用 Android 7.0 以下的手机和 7.0 以下的微信小程序版本？"></a>为什么要使用 Android 7.0 以下的手机和 7.0 以下的微信小程序版本？</h3><p>参考 : <a href="https://testerhome.com/topics/17746" target="_blank" rel="noopener">听说安卓微信 7.0 不能抓 https? · TesterHome</a></p>
]]></content>
      <categories>
        <category>技术</category>
        <category>爬虫</category>
      </categories>
      <tags>
        <tag>抓取数据</tag>
        <tag>Fiddler</tag>
        <tag>手机端</tag>
        <tag>小程序</tag>
      </tags>
  </entry>
  <entry>
    <title>使用jieba库进行中文分词</title>
    <url>/2019/05/18/%E4%BD%BF%E7%94%A8jieba%E5%BA%93%E8%BF%9B%E8%A1%8C%E4%B8%AD%E6%96%87%E5%88%86%E8%AF%8D/</url>
    <content><![CDATA[<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> xlwt  <span class="comment"># 写入excel库</span></span><br><span class="line"><span class="keyword">import</span> jieba.analyse</span><br><span class="line"><span class="keyword">import</span> jieba</span><br><span class="line"><span class="keyword">import</span> xlrd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将文本编码转换为utf-8格式</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">reload(sys)</span><br><span class="line">sys.setdefaultencoding(<span class="string">'utf-8'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># excel转变为文本</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">excel2txt</span><span class="params">(file_path)</span>:</span></span><br><span class="line">    data = xlrd.open_workbook(</span><br><span class="line">        file_path, encoding_override=<span class="string">'utf-8'</span>)  <span class="comment"># 打开Excel文件读取数据</span></span><br><span class="line">    sh = data.sheet_by_name(<span class="string">"Sheet1"</span>)  <span class="comment"># 通过工作簿名称获取</span></span><br><span class="line">    n = <span class="number">0</span></span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    file = open(<span class="string">"temp.txt"</span>, <span class="string">"w"</span>)</span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> range(sh.nrows):</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(sh.ncols):</span><br><span class="line">            text = sh.cell_value(n, i).encode(<span class="string">'utf-8'</span>)</span><br><span class="line">            file.write(text)</span><br><span class="line">            file.write(<span class="string">'\n'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结巴词频分析</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">jieba_analyse</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">        wbk = xlwt.Workbook(encoding=<span class="string">'ascii'</span>)</span><br><span class="line">        sheet = wbk.add_sheet(<span class="string">"wordCount"</span>)  <span class="comment"># Excel单元格名字</span></span><br><span class="line">        word_lst = []</span><br><span class="line">        key_list = []</span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> open(<span class="string">'temp.txt'</span>):  <span class="comment"># 1.txt是需要分词统计的文档</span></span><br><span class="line"></span><br><span class="line">            item = line.strip(<span class="string">'\n\r'</span>).split(<span class="string">'\t'</span>)  <span class="comment"># 制表格切分</span></span><br><span class="line">            <span class="comment"># print item</span></span><br><span class="line">            tags = jieba.analyse.extract_tags(item[<span class="number">0</span>])  <span class="comment"># jieba分词</span></span><br><span class="line">            <span class="keyword">for</span> t <span class="keyword">in</span> tags:</span><br><span class="line">                word_lst.append(t)</span><br><span class="line"></span><br><span class="line">        word_dict = &#123;&#125;</span><br><span class="line">        <span class="keyword">with</span> open(<span class="string">"wordCount.txt"</span>, <span class="string">'w'</span>) <span class="keyword">as</span> wf2:  <span class="comment"># 打开文件</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> item <span class="keyword">in</span> word_lst:</span><br><span class="line">                <span class="keyword">if</span> item <span class="keyword">not</span> <span class="keyword">in</span> word_dict:  <span class="comment"># 统计数量</span></span><br><span class="line">                    word_dict[item] = <span class="number">1</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    word_dict[item] += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">            orderList = list(word_dict.values())</span><br><span class="line">            orderList.sort(reverse=<span class="literal">True</span>)</span><br><span class="line">            <span class="comment"># print orderList</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(len(orderList)):</span><br><span class="line">                <span class="keyword">for</span> key <span class="keyword">in</span> word_dict:</span><br><span class="line">                    <span class="keyword">if</span> word_dict[key] == orderList[i]:</span><br><span class="line">                        <span class="comment"># 写入txt文档</span></span><br><span class="line">                        wf2.write(key + <span class="string">' '</span> + str(word_dict[key]) + <span class="string">'\n'</span>)</span><br><span class="line">                        key_list.append(key)</span><br><span class="line">                        word_dict[key] = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(key_list)):</span><br><span class="line">            sheet.write(i, <span class="number">1</span>, label=orderList[i])</span><br><span class="line">            sheet.write(i, <span class="number">0</span>, label=key_list[i])</span><br><span class="line">        wbk.save(<span class="string">'wordCount.xls'</span>)  <span class="comment"># 保存为 wordCount.xls文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 要分析的xlsx表</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">analyse_word</span><span class="params">(file_path)</span>:</span></span><br><span class="line">    excel2txt(file_path)</span><br><span class="line">    jieba_analyse()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">analyse_word(<span class="string">'data2.xlsx'</span>)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>jieba</tag>
        <tag>中文分词</tag>
        <tag>分词</tag>
      </tags>
  </entry>
  <entry>
    <title>如何面试前端</title>
    <url>/2020/01/10/%E5%A6%82%E4%BD%95%E9%9D%A2%E8%AF%95%E5%89%8D%E7%AB%AF/</url>
    <content><![CDATA[<h1 id="如何面试前端"><a href="#如何面试前端" class="headerlink" title="如何面试前端"></a>如何面试前端</h1><ol>
<li><p>明确招聘目标</p>
<ul>
<li><p>招聘的人数。如果人数少，为了追求小而精，招聘前端的质量就要高一些。</p>
</li>
<li><p>招聘目标在团队的工作角色。要招聘的人是在团队中做基础工作，允许缓慢成长，还是说要立马上手扛项目，这个要明确。</p>
</li>
<li><p>招聘目标在团队中的团体角色。除工作角色之外，是否还有承担其他的角色。比如，调节团队风格等。</p>
</li>
</ul>
</li>
<li><p>代码能力</p>
<blockquote>
<p>show me your code, talk is cheap</p>
</blockquote>
<ul>
<li>真实线上项目。如果有开源项目或者上线项目，可以翻看源码</li>
<li>github 项目</li>
<li>本地项目</li>
<li>csdn 等个人博客</li>
</ul>
</li>
<li><p>招聘目标的专业能力和态度</p>
<blockquote>
<p>对于技术人员，最重要的始终是专业能力。仗剑走天涯，剑一定要锋利才可用。那么可以划分为以下几个维度</p>
</blockquote>
</li>
</ol>
<ul>
<li>html/css</li>
<li>js/es6/es7/typescript</li>
<li>react/vue/angular 等框架</li>
<li>工程知识<ul>
<li>软件工程</li>
</ul>
</li>
<li>思维<ul>
<li>系统性思维</li>
<li>定期复盘</li>
</ul>
</li>
<li>性格</li>
<li>业务认知</li>
</ul>
<p>针对以上维度，可以准备各自 6-7 个问题，对面试者进行提问，并对每个维度进行分等级打分。最后得出一个综合等级。采用 A/B/C 级以上者。</p>
<ol start="4">
<li>分辨面试者的面试角色和真实角色之间的差异</li>
</ol>
<p>面试者在面试时总会想要美化自己，而且短暂的面试时间并不能体现出一个人的特点。所以我们要仔细甄别面试人的真实角色是如何的，通过一些技术手段或者社会工程学方法可以辨识面试者的真实角色。</p>
]]></content>
      <categories>
        <category>工作</category>
      </categories>
      <tags>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title>广州出差总结</title>
    <url>/2019/10/14/%E5%B9%BF%E5%B7%9E%E5%87%BA%E5%B7%AE%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h1 id="广州出差总结"><a href="#广州出差总结" class="headerlink" title="广州出差总结"></a>广州出差总结</h1><ol>
<li><p>一个糟糕的项目架构会将这种糟糕一直延续下去。</p>
<ul>
<li><p>难懂</p>
</li>
<li><p>难以变动</p>
</li>
</ul>
<p>（1）webpack 构建工具没有搭建</p>
<p>（2）混用 react 和 jquery</p>
<p>（3）没有开发规范</p>
<p>（4）没有开发文档</p>
<p>（5）没有完善的工具链</p>
</li>
<li><p>学无边界，要加强基础知识的学习。</p>
</li>
<li><p>复杂度高，代码量多的项目应该多考虑设计模式。</p>
</li>
<li><p>事先设计。</p>
</li>
<li><p>加强业务学习。</p>
</li>
<li><p>大公司没有想象中的那么美好。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>工作</category>
      </categories>
      <tags>
        <tag>总结</tag>
      </tags>
  </entry>
  <entry>
    <title>小程序缓存API解决方案</title>
    <url>/2019/11/27/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%BC%93%E5%AD%98API%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
    <content><![CDATA[<p>为了避免给服务器造成过大压力，造成资源浪费，我们可以将一些 API 数据缓存在客户端本机中。这种缓存的对象应该具有以下特点：</p>
<ol>
<li>数据量少。</li>
<li>及时性要求不高，不需要实时更新。</li>
<li>数据较为固定。</li>
</ol>
<p>对于缓存 API 的方案，分为两种。一是单独封装工具供开发者调用，二是在 http 请求工具中使用缓存代理</p>
<h2 id="单独封装工具"><a href="#单独封装工具" class="headerlink" title="单独封装工具"></a>单独封装工具</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> cacheTool = &#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param <span class="type">&#123;string&#125;</span> </span>key 键名</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param <span class="type">&#123;any&#125;</span> </span>data 缓存的数据</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param <span class="type">&#123;number&#125;</span> </span>second 需要缓存的时间，以秒为单位</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  setItem: <span class="function"><span class="keyword">function</span> (<span class="params">key, data, second</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> expireTime = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime() + <span class="built_in">Number</span>(second) * <span class="number">1000</span>;</span><br><span class="line">    wx.setStorageSync(key, &#123; data, expireTime &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">  getItem: <span class="function"><span class="keyword">function</span> (<span class="params">key</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (_this._isSet(key)) &#123;</span><br><span class="line">      <span class="keyword">const</span> isNotExpire = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime() &lt;= cache.expireTime;</span><br><span class="line">      <span class="keyword">if</span> (isNotExpire) &#123;</span><br><span class="line">        <span class="keyword">const</span> cache = wx.getStorageSync(key);</span><br><span class="line">        <span class="keyword">return</span> &#123; <span class="attr">valid</span>: <span class="literal">true</span>, <span class="attr">data</span>: cache.data &#125;;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123; <span class="attr">valid</span>: <span class="literal">false</span> &#125;;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123; <span class="attr">valid</span>: <span class="literal">false</span> &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  _isSet: <span class="function"><span class="keyword">function</span> (<span class="params">key</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> cache = wx.getStorageSync(key);</span><br><span class="line">    <span class="keyword">return</span> cache !== <span class="string">""</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>调用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> cache = cacheTool.getItem(<span class="string">"name"</span>);</span><br><span class="line"><span class="keyword">if</span> (cache.valid) &#123;</span><br><span class="line">  <span class="keyword">this</span>.setData(&#123;</span><br><span class="line">    list: cache.data,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="comment">//	http request</span></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  cacheTool.setItem(<span class="string">"name"</span>, data, <span class="number">600</span>); <span class="comment">// 设置10分钟缓存</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="在-http-工具中使用缓存代理"><a href="#在-http-工具中使用缓存代理" class="headerlink" title="在 http 工具中使用缓存代理"></a>在 http 工具中使用缓存代理</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//	https.js</span></span><br><span class="line"><span class="comment">//  <span class="doctag">TODO:</span>仍需改进</span></span><br><span class="line"><span class="keyword">const</span> baseURL = <span class="string">"https://nufm.dfcfw.com/EM_Finance2014NumericApplication"</span>;</span><br><span class="line"><span class="keyword">const</span> cacheTool = <span class="built_in">require</span>(<span class="string">"../util/cacheTool.js"</span>);</span><br><span class="line"><span class="keyword">const</span> http = <span class="function">(<span class="params">&#123; url, data, method = <span class="string">"get"</span>, cache = <span class="literal">false</span>, expire = <span class="number">600</span>, cacheKey = <span class="string">"_"</span> &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (cache) &#123;</span><br><span class="line">      <span class="keyword">const</span> cache = cacheTool.getItem(cacheKey);</span><br><span class="line">      <span class="keyword">if</span> (cache.valid) &#123;</span><br><span class="line">        resolve(cache.data);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        httpRequest(url, data, method, cache, expire, cacheKey)</span><br><span class="line">          .then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">            resolve(res);</span><br><span class="line">          &#125;)</span><br><span class="line">          .catch(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">            reject(err);</span><br><span class="line">          &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      httpRequest(url, data, method, cache)</span><br><span class="line">        .then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">          resolve(res);</span><br><span class="line">        &#125;)</span><br><span class="line">        .catch(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">          reject(err);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> httpRequest = <span class="function">(<span class="params">url, data, method, cache, expire, cacheKey</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    wx.request(&#123;</span><br><span class="line">      url: <span class="string">`<span class="subst">$&#123;baseURL&#125;</span>/<span class="subst">$&#123;url&#125;</span>`</span>,</span><br><span class="line">      data,</span><br><span class="line">      method,</span><br><span class="line">      header: &#123;</span><br><span class="line">        <span class="string">"content-type"</span>: <span class="string">"application-json"</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      complete: <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (res.statusCode &gt;= <span class="number">200</span> &amp;&amp; res.statusCode &lt; <span class="number">300</span>) &#123;</span><br><span class="line">          <span class="keyword">if</span> (cache) &#123;</span><br><span class="line">            cacheTool.setItem(cacheKey, res, expire);</span><br><span class="line">          &#125;</span><br><span class="line">          resolve(res.data);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          reject(res);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">module</span>.exports = http;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//	调用</span></span><br><span class="line">http(&#123;</span><br><span class="line">  url:</span><br><span class="line">    <span class="string">"JS.aspx?type=CT&amp;cmd=BK04781&amp;sty=DCFFMBFMS&amp;st=&amp;sr=&amp;p=&amp;ps=&amp;cb=&amp;js=result37523225((x))&amp;token=0b9469e9fdfd123fcec4532ae1c20f4f&amp;callback=result37523225&amp;_=1574835480421"</span>,</span><br><span class="line">  cache: <span class="literal">true</span>,</span><br><span class="line">  expire: <span class="number">10</span>,</span><br><span class="line">  cacheKey: <span class="string">"test"</span>,</span><br><span class="line">  data: <span class="string">"book_id=947&amp;4id=914372&amp;sky=fd732789509e52a2169d58f8959af7c8&amp;t=1574836186&amp;_type=ajax&amp;rndval=1574834470633"</span>,</span><br><span class="line">&#125;).then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"res"</span>, <span class="built_in">JSON</span>.stringify(res));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>技术</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>小程序</tag>
      </tags>
  </entry>
  <entry>
    <title>引用豆瓣图片在手机上失效</title>
    <url>/2019/05/10/%E5%BC%95%E7%94%A8%E8%B1%86%E7%93%A3%E5%9B%BE%E7%89%87%E5%9C%A8%E6%89%8B%E6%9C%BA%E4%B8%8A%E5%A4%B1%E6%95%88/</url>
    <content><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>在做一个个人页面时，引用了豆瓣读书里面书籍封面图片。但是出现一个现象:在 web 端可以显示的图片，在手机上却不能正确的加载出来。</p>
<h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>豆瓣 API 请求是有限制的，约为每分钟 40 次，超过了这个次数就要被限制，限制为每分钟 10 次。所以，如果网页上引用了大量的豆瓣图片，那么，一次可能会加载出一些，但是加载不出来全部。特别是刷新之后，确定为同一源头发起的请求之后，大量的图片将请求不到。</p>
<h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>使用图片缓存方法，使用<code>https://images.weserv.nl/?url=</code>再加上原来豆瓣图片地址去掉<code>https://</code>的链接，即可访问。</p>
<p>具体:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//	原来</span></span><br><span class="line">https:<span class="comment">//img3.doubanio.com/view/subject/l/public/s2955123.jpg</span></span><br><span class="line"><span class="comment">//	修改后</span></span><br><span class="line">https:<span class="comment">//images.weserv.nl/?url=img3.doubanio.com/view/subject/l/public/s2955123.jpg</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>问题</tag>
      </tags>
  </entry>
  <entry>
    <title>快速排序的思路与方法</title>
    <url>/2019/04/03/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F%E7%9A%84%E6%80%9D%E8%B7%AF%E4%B8%8E%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h1 id="快速排序算法的思路与实现-js-语言"><a href="#快速排序算法的思路与实现-js-语言" class="headerlink" title="快速排序算法的思路与实现(js 语言)"></a>快速排序算法的思路与实现(js 语言)</h1><h2 id="D-amp-C-divide-and-conquer-分而治之"><a href="#D-amp-C-divide-and-conquer-分而治之" class="headerlink" title="D&amp;C(divide and conquer) 分而治之"></a>D&amp;C(divide and conquer) 分而治之</h2><p>d&amp;c 是一种递归式解决问题的方法(思路)，使用 d&amp;c 解决问题分为两个步骤:1. 找出基线条件(不再递归的条件),这种条件应该尽可能的简单。 2. 不断将问题分解(或者说缩小规模)，直到符合基线条件</p>
<h2 id="逻辑"><a href="#逻辑" class="headerlink" title="逻辑"></a>逻辑</h2><p>如果一个数组是已经排好序的数组，那个在这个数组中任选一个元素，元素左边的元素将会小于等于该元素，元素所有右边的元素将会大于等于该元素。</p>
<p>我们依据该元素，可以对一个无序数组做如下操作。任选一个元素，循环该无需数组，声明两个数组变量，一个是 less,一个是 greater,我们把小于该元素的数放入 less 数组中，把大于该元素放入 greater 中，那个便满足了以上的逻辑。接下来，我们再从 less 数组中选取一个元素，执行如上操作，使得 less 数组又分为两组，一组比选中元素小，一组比选中元素大。对 greater 数组也同样操作。这样下来，最后我们得到的就是一个有序的数组。</p>
<h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><ol>
<li>找基准值(pivot)</li>
<li>分区(partitioning):找出比基准值以及比基准值大的元素 =&gt; 数组划分为:一个小于基准值的子数组,基准值,一个大于基准值的子数组</li>
<li>递归</li>
</ol>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">quickSort</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (arr.length &lt; <span class="number">2</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> pivot = arr.splice(<span class="built_in">Math</span>.floor(arr.length / <span class="number">2</span>), <span class="number">1</span>)[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">let</span> less = [],</span><br><span class="line">      greater = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (arr[i] &lt;= pivot) &#123;</span><br><span class="line">        less.push(arr[i]);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        greater.push(arr[i]);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> quickSort(less).concat([pivot], quickSort(greater)); <span class="comment">//  结果将存储在这里</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(quickSort([<span class="number">3</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">4</span>])));</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>技术</category>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>排序</tag>
      </tags>
  </entry>
  <entry>
    <title>网络信息资源检索</title>
    <url>/2019/01/15/%E7%BD%91%E7%BB%9C%E4%BF%A1%E6%81%AF%E8%B5%84%E6%BA%90%E6%A3%80%E7%B4%A2/</url>
    <content><![CDATA[<h2 id="检索分析"><a href="#检索分析" class="headerlink" title="检索分析"></a>检索分析</h2><p>待续</p>
<h2 id="网络引擎的运用（谷歌）"><a href="#网络引擎的运用（谷歌）" class="headerlink" title="网络引擎的运用（谷歌）"></a>网络引擎的运用（谷歌）</h2><h3 id="操作符"><a href="#操作符" class="headerlink" title="操作符"></a>操作符</h3><p><code>+</code> 强制搜索<br>由于 Google 会忽略和过滤一些常用词（称为 stop words / common words），如 and、how 等。使用+可以让搜索引擎强制包括这些词。使用+还可以强制过滤关键词变体形式（不让搜索结果出现关键词的其它形式），如单复数、动词时态、ing 形式等等。</p>
<p><code>-</code> 逻辑非<br>用于过滤-号后面的关键词。如：MP3 -MP4，表示只搜索 MP3 而不要 MP4 的搜索结果。 -号后面没有空格。</p>
<p><code>~</code> 同义词<br>关键词前加波浪线。如：~table 。</p>
<p><code>*</code> 通配符<br>如：Google was founded in * 。</p>
<p><code>**</code> 指数<br>作用同 ^ ，如：2**10 。</p>
<p><code>&quot; &quot;</code> 引号<br>用引号精确搜索，有时可只用左侧引号。如：”Google hacking” = “Google hacking 。</p>
<p><code>|</code> 逻辑或<br>作用同 OR ，如：Google hacking | hacks 。</p>
<p><code>..</code> 数字范围<br>用于限定数值范围，如：spring festival logo 2002..2009 。</p>
<p><code>^</code> 指数<br>作用同 ** ，如：2^10 。</p>
<h3 id="操作命令"><a href="#操作命令" class="headerlink" title="操作命令"></a>操作命令</h3><p><code>OR</code> 逻辑或<br>作用同 | ，如：Google hacking OR hacks 。</p>
<p><code>define</code>: 关键词定义<br>查询关键词的网络释义。如： define:google 。</p>
<p><code>ext</code>: 限定搜索指定文件类型<br>作用同 filetype:</p>
<p><code>filetype</code>: 限定搜索指定文件类型<br>作用同 ext: 如：filetype:pdf = ext:pdf 。目前文件类型支持如下格式：<br>Adobe Acrobat PDF (.pdf)<br>Adobe Postscript (.ps)<br>Autodesk DWF (.dwf)<br>Google 地球 KML (.kml)<br>Google 地球 KMZ (.kmz)<br>Lotus 1-2-3（wk1、wk2、wk3、wk4、wk5、wki、wks、wku）<br>Lotus WordPro (.lwp)<br>MacWrite (.mw)<br>Microsoft Excel (.xls)<br>Microsoft Powerpoint (.ppt)<br>Microsoft Word (.doc)<br>Microsoft Works（wks、wps、wdb）<br>Microsoft Write (.wri)<br>Rich Text Format 富文本格式 (.rtf)<br>Shockwave Flash (.swf)<br>纯文本（ans、txt）</p>
<p><code>intitle</code>: 限定搜索标题中含指定关键词的网页<br>如： intitle:google search guide 。<br>限定多个关键词用 allintitle:</p>
<p><code>inurl</code>: 限定搜索 url 中含指定关键词的网页<br>如： inurl:google search guide 。通过 inurl:view.shtml 你可以找到在线的网络摄像头。<br>限定多个关键词用 allinurl:</p>
<p><code>inanchor</code>: 限定搜索页面链接锚文本中含指定关键词的网页<br>如： inanchor:google search guide 。<br>限定多个关键词用 allinanchor:</p>
<p><code>intext</code>: 限定搜索正文文本（不含标题和链接）中含指定关键词的网页<br>如： intext:google vs mircosoft。</p>
<h4 id="网站网页命令"><a href="#网站网页命令" class="headerlink" title="网站网页命令"></a>网站网页命令</h4><p><code>site</code>: 限定搜索某网站的网页<br>如： site:<a href="http://www.google.com" target="_blank" rel="noopener">www.google.com</a> 。</p>
<p><code>link</code>: 搜索链向某网站/网址的网页<br>如： link:<a href="http://www.google.com" target="_blank" rel="noopener">www.google.com</a> 。</p>
<p><code>related</code>: 搜索与某网页相似或相关的页面<br>如： related:<a href="http://www.google.com" target="_blank" rel="noopener">www.google.com</a> 。</p>
<p><code>cache</code>: 搜索某网页在 Google 缓存（网页快照）中的旧版本<br>如： cache:<a href="http://www.google.com" target="_blank" rel="noopener">www.google.com</a> 。</p>
<p><code>info</code>: 综合查询某网页的信息，即列出上述四个命令<br>如： info:<a href="http://www.google.com" target="_blank" rel="noopener">www.google.com</a> 。<br>作用同 id:</p>
<h3 id="计算器"><a href="#计算器" class="headerlink" title="计算器"></a>计算器</h3><p>54kg=?g</p>
<h3 id="其他技巧"><a href="#其他技巧" class="headerlink" title="其他技巧"></a>其他技巧</h3><h4 id="浏览器和电脑操作"><a href="#浏览器和电脑操作" class="headerlink" title="浏览器和电脑操作"></a>浏览器和电脑操作</h4><p><code>ctrl+F</code>:在本页中查找关键字<br><code>ctrl+L</code>:选中浏览器地址<br><code>ctrl+tab</code>:切换浏览器标签<br><code>alt+tab</code>:切换程序</p>
<h2 id="常用网址"><a href="#常用网址" class="headerlink" title="常用网址"></a>常用网址</h2><h3 id="学习视频网站"><a href="#学习视频网站" class="headerlink" title="学习视频网站"></a>学习视频网站</h3><p><a href="https://www.icourse163.org/" target="_blank" rel="noopener">中国大学 MOOC(慕课)_国家精品课程在线学习平台</a><br><a href="https://open.163.com/" target="_blank" rel="noopener">网易公开课</a><br><a href="http://www.xuetangx.com/" target="_blank" rel="noopener">学堂在线-精品中文慕课(mooc)平台</a><br><a href="http://www.coursade.com/" target="_blank" rel="noopener">Coursade - Discover online learning</a><br><a href="https://www.khanacademy.org/" target="_blank" rel="noopener">Khan Academy | Free Online Courses, Lessons &amp; Practicea</a><br><a href="https://www.coursera.org/" target="_blank" rel="noopener">Coursera | Online Courses From Top Universities. Join for Free</a><br><a href="http://www.icourses.cn/home/" target="_blank" rel="noopener">爱课程</a></p>
<h3 id="资料检索网站"><a href="#资料检索网站" class="headerlink" title="资料检索网站"></a>资料检索网站</h3><p><a href="https://book.douban.com/" target="_blank" rel="noopener">豆瓣读书</a><br><a href="http://www.360doc.com/index.html" target="_blank" rel="noopener">360doc 个人图书馆</a><br><a href="https://wenku.baidu.com/" target="_blank" rel="noopener">百度文库</a><br><a href="http://www.nlc.cn/" target="_blank" rel="noopener">中国国家图书馆•中国国家数字图书馆</a></p>
<h3 id="免费资源下载网站"><a href="#免费资源下载网站" class="headerlink" title="免费资源下载网站"></a>免费资源下载网站</h3><p><a href="http://www.panduoduo.net/" target="_blank" rel="noopener">盘多多-百度云盘-百度云搜索-百度云盘资源搜索-百度网盘搜索引擎-微盘,新浪微盘-网盘搜索_盘多多</a></p>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p>[1]<a href="http://www.googleguide.com/" target="_blank" rel="noopener">interactive online google tutorial and references - google guide</a></p>
]]></content>
      <categories>
        <category>思维与方法</category>
      </categories>
      <tags>
        <tag>检索</tag>
        <tag>分析</tag>
      </tags>
  </entry>
  <entry>
    <title>表单验证工具</title>
    <url>/2019/10/10/%E8%A1%A8%E5%8D%95%E9%AA%8C%E8%AF%81%E5%B7%A5%E5%85%B7/</url>
    <content><![CDATA[<h1 id="表单验证工具"><a href="#表单验证工具" class="headerlink" title="表单验证工具"></a>表单验证工具</h1><h2 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h2><p>​ 对于表单需要校验的内容，参考<code>element-ui</code>和<code>ant-design</code>实现对是否必填、字符长度、大小、正则、类型校验。其中，类型包括<code>integer、number、string、bool</code>等。校验工具将会把校验结果返回。</p>
<p>​ 对于所有表单数据的一次性校验，只需要传入所有的表单数据和校验规则，校验工具将会返回校验结果。</p>
<p>​ 对于表单某输入项的实时校验，只需要在光标移出输入框时使用校验工具校验。此时传入所有表单的数据、校验规则、以及该项对应的字段名。校验工具将会过滤掉 required（必输校验）。最终返回校验规则</p>
<h2 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment"> * (一)校验示例</span></span><br><span class="line"><span class="comment"> * let stu = &#123;name:'',phone:''&#125;;</span></span><br><span class="line"><span class="comment"> * let rules = &#123;</span></span><br><span class="line"><span class="comment"> *  name:[&#123;required:true, message:'请输入名称'&#125;, &#123;minLength:2, maxLength:5, message:'姓名长度在2-5个字符'&#125;],</span></span><br><span class="line"><span class="comment"> *  phone:[&#123;required:true, message:'请输入手机号'&#125;, &#123;pattern: /^1[34578]\d&#123;9&#125;$/,message:'请输入正确的手机号!'&#125;]</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> * // 校验全部表单数据</span></span><br><span class="line"><span class="comment"> * let validateRes = validateForm(stu, rules);</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * // 校验某个字段</span></span><br><span class="line"><span class="comment"> * let validateRes = validateForm(stu, rules, 'name');</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * (二)支持校验规则</span></span><br><span class="line"><span class="comment"> * 1. 是否必填 required:true|false(message是指不符合规则的提示信息))</span></span><br><span class="line"><span class="comment"> * 2. 字符长度校验 minLength:3|maxLength:10(包括3和10)</span></span><br><span class="line"><span class="comment"> * 3. 数字大小校验 min:3|max:10(包括3和10)</span></span><br><span class="line"><span class="comment"> * 4. 正则校验 pattern:/^1[34578]\d&#123;9&#125;$/ (注意表单输入的都是字符串)</span></span><br><span class="line"><span class="comment"> * 5. 类型校验 type:"integer"|"number"|"string"|"bool"</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/************************ 校验策略对象 ******************************/</span></span><br><span class="line"><span class="keyword">const</span> strategies = &#123;</span><br><span class="line">  required: <span class="function"><span class="keyword">function</span> (<span class="params">val, isRequired</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (isRequired) &#123;</span><br><span class="line">      <span class="keyword">return</span> val.length &gt; <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">  minLength: <span class="function"><span class="keyword">function</span> (<span class="params">val, minLen</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (val.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> val.length &gt;= minLen;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">  maxLength: <span class="function"><span class="keyword">function</span> (<span class="params">val, maxLen</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (val.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> val.length &lt;= maxLen;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">  min: <span class="function"><span class="keyword">function</span> (<span class="params">val, minNum</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (val.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">Number</span>(val) &gt;= minNum;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">  max: <span class="function"><span class="keyword">function</span> (<span class="params">val, maxNum</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (val.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">Number</span>(val) &lt;= maxNum;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">  pattern: <span class="function"><span class="keyword">function</span> (<span class="params">val, patternRule</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (val.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> patternRule.test(val);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">  type: <span class="function"><span class="keyword">function</span> (<span class="params">val, valType</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (val.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">let</span> isRequiredValType = <span class="literal">false</span>;</span><br><span class="line">      <span class="keyword">switch</span> (valType) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">"integer"</span>:</span><br><span class="line">          <span class="keyword">if</span> (<span class="built_in">parseInt</span>(val) === <span class="built_in">Number</span>(val) &amp;&amp; val.indexOf(<span class="string">"."</span>) === <span class="number">-1</span>) &#123;</span><br><span class="line">            isRequiredValType = <span class="literal">true</span>;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">"number"</span>:</span><br><span class="line">          <span class="keyword">if</span> (<span class="built_in">parseFloat</span>(val).toString() !== <span class="string">"NaN"</span>) &#123;</span><br><span class="line">            isRequiredValType = <span class="literal">true</span>;</span><br><span class="line">          &#125;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">          <span class="keyword">if</span> (<span class="keyword">typeof</span> val === valType) &#123;</span><br><span class="line">            isRequiredValType = <span class="literal">true</span>;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> isRequiredValType;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*******************************  Validator类 ***************************************/</span></span><br><span class="line"><span class="keyword">let</span> Validator = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.cache = [];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 挑选校验规则</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Validator.prototype.add = <span class="function"><span class="keyword">function</span> (<span class="params">rules</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> _this = <span class="keyword">this</span>;</span><br><span class="line">  rules.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">item</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">in</span> item) &#123;</span><br><span class="line">      <span class="keyword">if</span> (strategies.hasOwnProperty(i)) &#123;</span><br><span class="line">        <span class="keyword">const</span> validateGroup = &#123;&#125;;</span><br><span class="line">        validateGroup[i] = item[i];</span><br><span class="line">        validateGroup[<span class="string">"message"</span>] = item[<span class="string">"message"</span>];</span><br><span class="line">        _this.cache.push(validateGroup);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 开始校验</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Validator.prototype.start = <span class="function"><span class="keyword">function</span> (<span class="params">curData</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> _cache = <span class="keyword">this</span>.cache;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; _cache.length; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j <span class="keyword">in</span> _cache[i]) &#123;</span><br><span class="line">      <span class="keyword">if</span> (strategies.hasOwnProperty(j)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!strategies[j](curData, <span class="keyword">this</span>.cache[i][j])) &#123;</span><br><span class="line">          <span class="keyword">return</span> &#123; <span class="attr">flag</span>: <span class="literal">false</span>, <span class="attr">message</span>: <span class="keyword">this</span>.cache[i][<span class="string">"message"</span>] &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> &#123; <span class="attr">flag</span>: <span class="literal">true</span> &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/************************************ 环境调用 **************************************/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 深拷贝对象数组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;arr&#125;</span> </span>source 数组</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> deepCopy = <span class="function"><span class="keyword">function</span> (<span class="params">source</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> arr = source.map(<span class="function"><span class="keyword">function</span> (<span class="params">item</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> obj = &#123;&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">in</span> item) &#123;</span><br><span class="line">      obj[i] = item[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> obj;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> arr;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 过滤子项规则，去除required</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;obj&#125;</span> </span>allRules 所有规则</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;string&#125;</span> </span>prop 需要获取的规则的子项</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> getItemRules = <span class="function"><span class="keyword">function</span> (<span class="params">allRules, prop</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> ValidateItemRules = deepCopy(allRules[prop]);</span><br><span class="line">  <span class="keyword">let</span> validateItemRulesWithoutRequired = ValidateItemRules.filter(<span class="function"><span class="keyword">function</span> (<span class="params">item</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> !item.hasOwnProperty(<span class="string">"required"</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> validateItemRulesWithoutRequired;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取表单中的数据子项</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;obj&#125;</span> </span>allData 所有表单数据</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;string&#125;</span> </span>prop 需要获取的表单子项</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> getItemData = <span class="function"><span class="keyword">function</span> (<span class="params">allData, prop</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> data = <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(allData));</span><br><span class="line">  <span class="keyword">return</span> data[prop].toString().trim();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;string&#125;</span> </span>data 校验数据</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;obj&#125;</span> </span>rules 校验规则</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> runValidator = <span class="function"><span class="keyword">function</span> (<span class="params">data, rules</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> validator = <span class="keyword">new</span> Validator();</span><br><span class="line">  validator.add(rules);</span><br><span class="line">  <span class="keyword">return</span> validator.start(data);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 校验表单</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;obj&#125;</span> </span>data 表单数据</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;obj&#125;</span> </span>validateRules 表单校验规则</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;string&#125;</span> </span>prop 需要校验的子项字段</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> validateForm = <span class="function"><span class="keyword">function</span> (<span class="params">data, validateRules, prop</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (prop) &#123;</span><br><span class="line">    <span class="keyword">const</span> curData = getItemData(data, prop);</span><br><span class="line">    <span class="keyword">const</span> rules = getItemRules(validateRules, prop);</span><br><span class="line">    <span class="keyword">if</span> (rules) &#123;</span><br><span class="line">      <span class="keyword">const</span> validateRes = runValidator(curData, rules);</span><br><span class="line">      <span class="keyword">if</span> (!validateRes.flag) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123; <span class="attr">flag</span>: <span class="literal">false</span>, <span class="attr">name</span>: prop, <span class="attr">data</span>: curData, <span class="attr">message</span>: validateRes.message &#125;;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> &#123; <span class="attr">flag</span>: <span class="literal">true</span> &#125;;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">in</span> data) &#123;</span><br><span class="line">      <span class="keyword">const</span> rules = validateRules[i];</span><br><span class="line">      <span class="keyword">const</span> curData = data[i].toString().trim();</span><br><span class="line">      <span class="keyword">if</span> (rules) &#123;</span><br><span class="line">        <span class="keyword">const</span> validateRes = runValidator(curData, rules);</span><br><span class="line">        <span class="keyword">if</span> (!validateRes.flag) &#123;</span><br><span class="line">          <span class="keyword">return</span> &#123; <span class="attr">flag</span>: <span class="literal">false</span>, <span class="attr">name</span>: i, <span class="attr">data</span>: data[i], <span class="attr">message</span>: validateRes.message &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> &#123; <span class="attr">flag</span>: <span class="literal">true</span> &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = validateForm;</span><br></pre></td></tr></table></figure>

<p>​</p>
]]></content>
      <categories>
        <category>技术</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>表单</tag>
      </tags>
  </entry>
  <entry>
    <title>记一次对图片的处理</title>
    <url>/2019/01/14/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%AF%B9%E5%9B%BE%E7%89%87%E7%9A%84%E5%A4%84%E7%90%86/</url>
    <content><![CDATA[<h1 id="vue-中对图片的处理"><a href="#vue-中对图片的处理" class="headerlink" title="vue 中对图片的处理"></a>vue 中对图片的处理</h1><blockquote>
<p>工作上接触了一下图片的处理，图片的格式是文件流, 记录如下。</p>
</blockquote>
<h2 id="请求图片"><a href="#请求图片" class="headerlink" title="请求图片"></a>请求图片</h2><p>请求图片的时候，带上<code>{ responseType: &#39;blob&#39; }</code>, 否则图片显示的可能是乱码。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">axios</span><br><span class="line">  .post(url, parmas, &#123; <span class="attr">responseType</span>: <span class="string">"blob"</span> &#125;)</span><br><span class="line">  .then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(res);</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(e);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>

<h2 id="显示图片"><a href="#显示图片" class="headerlink" title="显示图片"></a>显示图片</h2><p>图片返回的是文件流的形式, 控制台中显示的是乱码。<br>直接显示二进制图片会出错，所以我们要进行处理。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- template中 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">alt</span>=<span class="string">"logo"</span> <span class="attr">:src</span>=<span class="string">"imageUrl"</span> @<span class="attr">error</span>=<span class="string">"handleLoadError"</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*------ script中------*/</span></span><br><span class="line"><span class="keyword">let</span> urlCreator = <span class="built_in">window</span>.URL || <span class="built_in">window</span>.webkitURL;</span><br><span class="line"><span class="keyword">let</span> imageUrl = urlCreator.createObjectURL(res);</span><br><span class="line"><span class="keyword">this</span>.imageUrl = imageUrl;</span><br></pre></td></tr></table></figure>

<p>显示图片中，要对万一图片显示不出来的情况进行处理。使用<code>onerror</code>事件可以对加载图片失败的情况进行处理。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">handleLoadError(e) &#123;</span><br><span class="line">  <span class="keyword">const</span> img = e.srcElement;</span><br><span class="line">  <span class="keyword">this</span>.imageUrl = <span class="keyword">this</span>.errorLoadImg;  <span class="comment">//  用加载失败的图片替代之</span></span><br><span class="line">  img.onerror = <span class="literal">null</span>; <span class="comment">//  清除错误:如果错误时加载时显示的图片出错，将会一直循环，所以我们必须清除掉错误，限制运行一次</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="上传图片-使用-element-ui-的-el-upload"><a href="#上传图片-使用-element-ui-的-el-upload" class="headerlink" title="上传图片:使用 element-ui 的 el-upload"></a>上传图片:使用 element-ui 的 el-upload</h2><h3 id="自动上传，一次传一张图片"><a href="#自动上传，一次传一张图片" class="headerlink" title="自动上传，一次传一张图片"></a>自动上传，一次传一张图片</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-upload</span></span></span><br><span class="line"><span class="tag">  <span class="attr">action</span>=<span class="string">"uploadUrl"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:show-file-list</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:accept</span>=<span class="string">"'image/*'"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:headers</span>=<span class="string">"&#123;token:$cookieStorage.token&#125;"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:on-success</span>=<span class="string">"handleSuccess"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:on-error</span>=<span class="string">"handleError"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:before-upload</span>=<span class="string">"handleBeforeUpload"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:on-progress</span>=<span class="string">"handleProgress"</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">"primary"</span> <span class="attr">size</span>=<span class="string">"medium"</span>&gt;</span>上传图片<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-upload</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">  action: 图片上传的地址</span></span><br><span class="line"><span class="comment">  show-file-list: 是否显示文件上传列表</span></span><br><span class="line"><span class="comment">  accept: 可接受的上传类型，image/*为图片</span></span><br><span class="line"><span class="comment">  headers: 头部信息</span></span><br><span class="line"><span class="comment">  on-success: 上传成功事件</span></span><br><span class="line"><span class="comment">  on-error: 上传失败事件</span></span><br><span class="line"><span class="comment">  before-upload: 上传前处理事件，返回一个值，值为false将阻止上传</span></span><br><span class="line"><span class="comment">  on-progress: 上传中事件</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*----- 以下为常用处理代码 ------*/</span></span><br><span class="line">handleSuccess(response, file, fileList) &#123;</span><br><span class="line">  <span class="keyword">this</span>.$success(<span class="string">"上传成功"</span>);</span><br><span class="line">&#125;,</span><br><span class="line">handleError() &#123;</span><br><span class="line">  <span class="keyword">this</span>.$error(<span class="string">"上传失败,请重新上传图片!"</span>);</span><br><span class="line">&#125;,</span><br><span class="line">handleBeforeUpload(file) &#123;</span><br><span class="line">  <span class="keyword">const</span> isImage = file.type.includes(<span class="string">"image"</span>);</span><br><span class="line">  <span class="keyword">if</span> (!isImage) &#123;</span><br><span class="line">    <span class="keyword">this</span>.$message.error(<span class="string">"上传文件类型必须是图片!"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> isLt2M = file.size / <span class="number">1024</span> / <span class="number">1024</span> &lt; <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">if</span> (!isLt2M) &#123;</span><br><span class="line">    <span class="keyword">this</span>.$message.error(<span class="string">"上传图片大小不能超过 2MB!"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> isImage &amp;&amp; isLt2M;</span><br><span class="line">&#125;,</span><br><span class="line">handleProgress(event, file, fileList) &#123;</span><br><span class="line">  <span class="keyword">this</span>.loading = <span class="literal">true</span>;  <span class="comment">//  上传时执行loading事件</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="手动上传，一次提交多个-el-upload-的图片"><a href="#手动上传，一次提交多个-el-upload-的图片" class="headerlink" title="手动上传，一次提交多个 el-upload 的图片"></a>手动上传，一次提交多个 el-upload 的图片</h3><blockquote>
<p>要求：每个 picture area 限制选择一张图片，点击确定后一起提交。</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-upload</span></span></span><br><span class="line"><span class="tag">  <span class="attr">action</span>=<span class="string">"myUrl"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:on-change</span>=<span class="string">"(file,fileList)=&gt;&#123;handleChange(file,fileList,1)&#125;"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:on-remove</span>=<span class="string">"(file,fileList)=&gt;&#123;handleRemove(file,fileList,1)&#125;"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:auto-upload</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:file-list</span>=<span class="string">"fileList[0]"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">ref</span>=<span class="string">"file1"</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">size</span>=<span class="string">"small"</span>&gt;</span>选择图片<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-upload</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">el-upload</span></span></span><br><span class="line"><span class="tag">  <span class="attr">action</span>=<span class="string">"myUrl"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:on-change</span>=<span class="string">"(file,fileList)=&gt;&#123;handleChange(file,fileList,2)&#125;"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:on-remove</span>=<span class="string">"(file,fileList)=&gt;&#123;handleRemove(file,fileList,2)&#125;"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:auto-upload</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:file-list</span>=<span class="string">"fileList[1]"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">ref</span>=<span class="string">"file2"</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">size</span>=<span class="string">"small"</span>&gt;</span>选择图片<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-upload</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">el-upload</span></span></span><br><span class="line"><span class="tag">  <span class="attr">action</span>=<span class="string">"myUrl"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:on-change</span>=<span class="string">"(file,fileList)=&gt;&#123;handleChange(file,fileList,3)&#125;"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:on-remove</span>=<span class="string">"(file,fileList)=&gt;&#123;handleRemove(file,fileList,3)&#125;"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:auto-upload</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:file-list</span>=<span class="string">"fileList[2]"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">ref</span>=<span class="string">"file3"</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">size</span>=<span class="string">"small"</span>&gt;</span>选择图片<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-upload</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">el-button</span> @<span class="attr">click</span>=<span class="string">"submitData"</span>&gt;</span>确认<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">  action:提交的地址，此处随便写一个，不写会报错</span></span><br><span class="line"><span class="comment">  on-change: 图片上传到缓存中将被触发</span></span><br><span class="line"><span class="comment">  on-remove: 从缓存中删除文件将被触发</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">data()&#123;</span><br><span class="line">  fileList: [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>], <span class="comment">//缓存区文件</span></span><br><span class="line">  uploadFile:[[],[],[]] <span class="comment">//  上传用文件</span></span><br><span class="line">&#125;,</span><br><span class="line">handleChange(file, fileList, type) &#123;</span><br><span class="line">  <span class="comment">//  限制单张上传，超过限制即覆盖</span></span><br><span class="line">  <span class="keyword">if</span> (fileList.length &gt; <span class="number">1</span>) &#123;</span><br><span class="line">    fileList.splice(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//  校验</span></span><br><span class="line">  <span class="keyword">const</span> isLt2M = file.size / <span class="number">1024</span> / <span class="number">1024</span> &lt; <span class="number">5</span>;</span><br><span class="line">  <span class="keyword">if</span> (!isLt2M) &#123;</span><br><span class="line">    <span class="keyword">this</span>.$message.error(<span class="string">"上传图片大小不能超过 5MB!"</span>);</span><br><span class="line">    <span class="keyword">this</span>.removeUploadedFile(type);  <span class="comment">//  不符合要求删除文件</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> isImage = file.raw.type.includes(<span class="string">"image"</span>);</span><br><span class="line">  <span class="keyword">if</span> (!isImage) &#123;</span><br><span class="line">    <span class="keyword">this</span>.$message.error(<span class="string">"上传的格式必须是图片!"</span>);</span><br><span class="line">    <span class="keyword">this</span>.removeUploadedFile(type);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//  验证通过之后，将缓存区文件存入上传区文件中</span></span><br><span class="line">  <span class="keyword">this</span>.formData.files[type] = file.raw;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">//  从缓存区移除文件</span></span><br><span class="line">removeUploadedFile(type) &#123;</span><br><span class="line">  <span class="keyword">if</span> (type === <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.$refs.file1.clearFiles();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (type === <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.$refs.file2.clearFiles();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (type === <span class="number">2</span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.$refs.file3.clearFiles();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//  删除文件</span></span><br><span class="line">handleRemove(file, fileList, type) &#123;</span><br><span class="line">  <span class="comment">//  删除文件时要移除缓存区文件和上传区文件</span></span><br><span class="line">  <span class="keyword">this</span>.fileList[type] = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">this</span>.uploadFile[type] = [];</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">//  上传文件</span></span><br><span class="line">submitData() &#123;</span><br><span class="line">  <span class="comment">//  校验是否选择文件</span></span><br><span class="line">  <span class="keyword">let</span> fileNum = <span class="keyword">this</span>.flatten(<span class="keyword">this</span>.uploadFile).length;</span><br><span class="line">  <span class="keyword">if</span> (fileNum === <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.$error(<span class="string">"未选择任何文件!"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//  使用formdata格式</span></span><br><span class="line">  <span class="keyword">let</span> formData = <span class="keyword">new</span> FormData();</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.formData.files[<span class="number">0</span>]) &#123;</span><br><span class="line">    formData.append(<span class="string">"file1"</span>, <span class="keyword">this</span>.formData.files[<span class="number">0</span>]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.formData.files[<span class="number">1</span>]) &#123;</span><br><span class="line">    formData.append(<span class="string">"file2"</span>, <span class="keyword">this</span>.formData.files[<span class="number">1</span>]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.formData.files[<span class="number">2</span>]) &#123;</span><br><span class="line">    formData.append(<span class="string">"file2"</span>, <span class="keyword">this</span>.formData.files[<span class="number">2</span>]);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//  请求:在headers上务必加上content-Type,指定表单形式发送</span></span><br><span class="line">  axios</span><br><span class="line">  .post(<span class="string">"uploadUrl"</span>, formData, &#123;<span class="attr">headers</span>: &#123; <span class="string">"Content-Type"</span>: <span class="string">"multipart/form-data"</span> &#125;&#125;)</span><br><span class="line">  .then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.$success(<span class="string">"上传图片成功!"</span>);</span><br><span class="line">    <span class="keyword">this</span>.fileList = [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">this</span>.uploadFile =[[],[],[]];</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(e);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//  扁平化数组</span></span><br><span class="line">flatten(arr) &#123;</span><br><span class="line">  <span class="keyword">let</span> res = [];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(arr[i])) &#123;</span><br><span class="line">      res = res.concat(<span class="keyword">this</span>.flatten(arr[i]));</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      res.push(arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Basics_of_HTTP/MIME_types#multipartform-data" target="_blank" rel="noopener">multipartform-data 相关知识</a></p>
<h2 id="图片加载技术：预加载和懒加载"><a href="#图片加载技术：预加载和懒加载" class="headerlink" title="图片加载技术：预加载和懒加载"></a>图片加载技术：预加载和懒加载</h2><ul>
<li>预加载：重点在”预”，在用户需要看到该图片之前，就已经加载和请求到该图片。</li>
<li>懒加载: 重点在”懒”，尽可能少的加载图片，只加载必需的图片（用户屏幕可视范围内）,目的是尽可能的减少请求数，减缓服务器的压力。<br>在 vue 中懒加载的组件有很多，比如<code>vue-lazy-laod</code>和<code>vue-clazy-load</code></li>
</ul>
<h2 id="浏览器阻塞"><a href="#浏览器阻塞" class="headerlink" title="浏览器阻塞"></a>浏览器阻塞</h2><blockquote>
<p>同一时间对服务器的请求过多，将会造成浏览器阻塞。<br>浏览器默认对同一域下的资源，只保持一定的连接数，阻塞过多的连接,以提高访问速度和解决阻塞问题。</p>
</blockquote>
<p>对于请求图片来说，有以下解决方法</p>
<ol>
<li>使用雪碧图：把所有图片合成一张大图。</li>
<li>延迟加载：只去请求可视区的图片。<br>最后使用了延迟加载,对非可视区领域的图片延迟加载，优先加载可视区图片，减少图片的请求数。</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">"imageUrl"</span> <span class="attr">ref</span>=<span class="string">"img"</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//  方式一:延迟加载非可视区域</span></span><br><span class="line">delayTime() &#123;</span><br><span class="line">  <span class="keyword">let</span> windowHeight = <span class="built_in">window</span>.innerHeight;</span><br><span class="line">  <span class="keyword">let</span> imgTop = <span class="keyword">this</span>.$refs.img.getBoundingClientRect().top;</span><br><span class="line">  <span class="keyword">const</span> isDelay = imgTop &gt; windowHeight;</span><br><span class="line">  <span class="keyword">if</span> (isDelay) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.random() * <span class="number">2000</span> + <span class="number">3000</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.random() * <span class="number">2000</span> + <span class="number">500</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//  方法二:按顺序依次延迟加载</span></span><br><span class="line">delayTime() &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.params.index) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.random() * <span class="number">2000</span> + <span class="keyword">this</span>.params.index * <span class="keyword">this</span>.params.type * <span class="number">500</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//  图片请求代码</span></span><br><span class="line">&#125;, <span class="keyword">this</span>.delayTime);</span><br></pre></td></tr></table></figure>

<p><strong>使用延时加载前的请求</strong><br><img src="http://ytju2r.coding-pages.com/%E5%BB%B6%E8%BF%9F%E5%8A%A0%E8%BD%BD%E5%89%8D.png" alt="使用延时加载前的请求"></p>
<p><strong>使用延时加载后的请求</strong><br><img src="http://ytju2r.coding-pages.com/%E5%BB%B6%E8%BF%9F%E5%8A%A0%E8%BD%BD%E5%90%8E.png" alt="使用延时记载后的请求"></p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>[1]<a href="https://xhr.spec.whatwg.org/#the-responsetype-attribute" target="_blank" rel="noopener">xmlhttprequest standard.the responsetype attribute</a><br>[2]<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest/responseType" target="_blank" rel="noopener">xmlhttprequest.responsetype | mdn</a><br>[3]<a href="https://www.zhangxinxu.com/wordpress/2013/10/understand-domstring-document-formdata-blob-file-arraybuffer/" target="_blank" rel="noopener">理解domstring、document、formdata、blob、file、arraybuffer数据类型 « 张鑫旭-鑫空间-鑫生活</a><br>[4]<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/FormData/Using_FormData_Objects" target="_blank" rel="noopener">formdata 对象的使用 | mdn</a><br>[5]<a href="https://blog.csdn.net/u012496505/article/details/73824327" target="_blank" rel="noopener">前端|加载的图片太多或者太大怎么办(上) - u012496505的博客 - csdn博客</a><br>[6]<a href="https://developers.google.com/web/fundamentals/performance/lazy-loading-guidance/images-and-video/" target="_blank" rel="noopener">lazy loading images and video | web fundamentals | google developers</a><br>[7]<a href="https://cloudinary.com/blog/an_introduction_to_progressive_image_rendering" target="_blank" rel="noopener">an introduction to progressive image rendering</a><br>[8]<a href="http://web.jobbole.com/92265/?utm_source=blog.jobbole.com&utm_medium=relatedPosts" target="_blank" rel="noopener">原生 js 实现最简单的图片懒加载 - web前端 - 伯乐在线</a></p>
]]></content>
      <categories>
        <category>技术</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>金融大数高精度计算解决方案</title>
    <url>/2019/09/28/%E9%87%91%E8%9E%8D%E5%A4%A7%E6%95%B0%E9%AB%98%E7%B2%BE%E5%BA%A6%E8%AE%A1%E7%AE%97%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
    <content><![CDATA[<h2 id="js-计算失误情况"><a href="#js-计算失误情况" class="headerlink" title="js 计算失误情况"></a>js 计算失误情况</h2><p>​ 在用 js 进行数值计算的时候，比如<code>0.1+0.2</code>时，会产生精度问题。另一方面，number 的计算范围有限，当 number 用来计算整数时，其范围为<code>-2^53 ~ 2^53</code>,为 16 位数。当数字超过 16 位数时，js 既不会报错，会造成的影响只是计算结果不准确；另外，当数字是小于 1 且小数点后面带有 6 个 0 以上的浮点数值或者整数位数字多于 21 位，js 会自动将数字转为科学计数法。</p>
<p>​ 为了解决这种情况，我们可以使用以下方法：</p>
<p>​ 1. 输入数字的时候尽量限制范围，防止用户输入过大不合理的数字</p>
<ol start="2">
<li><p>如果有产生由用户输出数字计算出来的数字，要校验该数字是否超过数据库允许的范围。比如进行乘操作的时候。</p>
</li>
<li><p>数据库中，以分为单位进行存储，避免存储小数。</p>
</li>
<li><p>计算数据时，不要使用<code>parseFloat</code>和<code>toFixed</code>相关 Number 对象方法进行计算，而是应该使用专门的库进行计算，比如此处说的 decimal.js 库</p>
</li>
</ol>
<h2 id="decimal-js"><a href="#decimal-js" class="headerlink" title="decimal.js"></a>decimal.js</h2><blockquote>
<p>github: <a href="https://github.com/MikeMcl/decimal.js" target="_blank" rel="noopener">https://github.com/MikeMcl/decimal.js</a></p>
</blockquote>
<p>decimal.js 是使用的二进制来计算的数字处理库，以下是基本运算:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 加法</span></span><br><span class="line"><span class="keyword">const</span> c = <span class="keyword">new</span> Decimal(a).plus(<span class="keyword">new</span> Decimal(b));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 减法</span></span><br><span class="line"><span class="keyword">const</span> d = <span class="keyword">new</span> Decimal(a).sub(<span class="keyword">new</span> Decimal(b));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 乘法</span></span><br><span class="line"><span class="keyword">const</span> e = <span class="keyword">new</span> Decimal(a).mul(<span class="keyword">new</span> Decimal(b));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 除法</span></span><br><span class="line"><span class="keyword">const</span> f = <span class="keyword">new</span> Decimal(a).div(<span class="keyword">new</span> Decimal(b));</span><br></pre></td></tr></table></figure>

<p>另外，Decimal 有自己专门的<code>toString</code>和<code>toFixed</code>方法。当然，decimal.js 还有很多其他的十分强大的功能。</p>
<h2 id="DemCal"><a href="#DemCal" class="headerlink" title="DemCal"></a>DemCal</h2><p>以下是根据 decimal.js 封装的一些进行计算时常用到的函数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> Decimal = <span class="built_in">require</span>(<span class="string">"./decimal.min.js"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 转换为Decimal类型</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;string/number&#125;</span> </span>_num 传入的数字，如果在js的有效范围外，那么传入必须是整数，否则会发生数据小数位丢失问题</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> </span>_fixedDecimal 需要保留的小数位，默认为0，即整数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> </span>_isToStr 是否需要转换为string返回，默认返回Decimal类型</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> toDecimal = <span class="function">(<span class="params">num, fixedDecimal = <span class="number">0</span>, isToStr = <span class="literal">false</span></span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 为什么不适用toString,或者String =&gt; 对于过大的数字,toString或者String会将其转换成科学计数法,比如1111111111111111111111111111111111111111会转变为"1.1111111111111112e+39"</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">let</span> _num = <span class="string">""</span> + num;</span><br><span class="line">  <span class="keyword">let</span> _fixedDecimal = fixedDecimal;</span><br><span class="line">  _num = <span class="keyword">new</span> Decimal(_num).toFixed(_fixedDecimal);</span><br><span class="line">  <span class="keyword">return</span> isToStr ? _num.toString() : <span class="keyword">new</span> Decimal(_num);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 两数相加</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;string/number&#125;</span> </span>num1 传入的数字1</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;string/number&#125;</span> </span>num2 传入的数字2</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> </span>fixedDecimal 需要保留的小数位，默认为0, 此处四舍五入</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> </span>isToStr 是否需要转换为string返回，默认返回Decimal类型</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> plus = <span class="function">(<span class="params">num1, num2, fixedDecimal = <span class="number">0</span>, isToStr = <span class="literal">false</span></span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> _num1 = toDecimal(num1);</span><br><span class="line">  <span class="keyword">const</span> _num2 = toDecimal(num2);</span><br><span class="line">  <span class="keyword">const</span> res = _num1.add(_num2).toFixed(fixedDecimal);</span><br><span class="line">  <span class="keyword">return</span> isToStr ? res.toString() : <span class="keyword">new</span> Decimal(res);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 两数相减</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;string/number&#125;</span> </span>num1 传入的数字1</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;string/number&#125;</span> </span>num2 传入的数字2</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> </span>fixedDecimal 需要保留的小数位，此处四舍五入</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> </span>isToStr 是否需要转换为string返回，默认返回Decimal类型</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> sub = <span class="function">(<span class="params">num1, num2, fixedDecimal = <span class="number">0</span>, isToStr = <span class="literal">false</span></span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> _num1 = toDecimal(num1);</span><br><span class="line">  <span class="keyword">const</span> _num2 = toDecimal(num2);</span><br><span class="line">  <span class="keyword">const</span> res = _num1.sub(_num2).toFixed(fixedDecimal);</span><br><span class="line">  <span class="keyword">return</span> isToStr ? res.toString() : <span class="keyword">new</span> Decimal(res);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 两数相除</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;string/number&#125;</span> </span>_num1 传入的数字1</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;string/number&#125;</span> </span>_num2 传入的数字2</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> </span>_fixedDecimal 需要保留的小数位，此处四舍五入</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> </span>isToStr 是否需要转换为string返回，默认返回Decimal类型</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> div = <span class="function">(<span class="params">num1, num2, fixedDecimal = <span class="number">0</span>, isToStr = <span class="literal">false</span></span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> _num1 = toDecimal(num1);</span><br><span class="line">  <span class="keyword">const</span> _num2 = toDecimal(num2);</span><br><span class="line">  <span class="keyword">const</span> res = _num1.div(_num2).toFixed(fixedDecimal);</span><br><span class="line">  <span class="keyword">return</span> isToStr ? res.toString() : <span class="keyword">new</span> Decimal(res);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 两数相乘</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;string/number&#125;</span> </span>_num1 传入的数字1</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;string/number&#125;</span> </span>_num2 传入的数字2</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> </span>_fixedDecimal 需要保留的小数位，此处四舍五入</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> </span>isToStr 是否需要转换为string返回，默认返回Decimal类型</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> mul = <span class="function">(<span class="params">num1, num2, fixedDecimal = <span class="number">0</span>, isToStr = <span class="literal">false</span></span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> _num1 = toDecimal(num1);</span><br><span class="line">  <span class="keyword">const</span> _num2 = toDecimal(num2);</span><br><span class="line">  <span class="keyword">const</span> res = _num1.mul(_num2).toFixed(fixedDecimal);</span><br><span class="line">  <span class="keyword">return</span> isToStr ? res.toString() : <span class="keyword">new</span> Decimal(res);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 累加</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;array&#125;</span> </span>_numList 数字列表</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;string/number&#125;</span> </span>_fixedDecimal 需要保留的小数位，此处四舍五入</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;string/number&#125;</span> </span>isToStr 是否需要转换为string返回，默认返回Decimal类型</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> sum = <span class="function">(<span class="params">numList, fixedDecimal = <span class="number">0</span>, isToStr = <span class="literal">false</span></span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> res = numList.reduce(<span class="function">(<span class="params">prev, next</span>) =&gt;</span> plus(prev, next));</span><br><span class="line">  <span class="keyword">return</span> isToStr ? toDecimal(res, fixedDecimal, <span class="literal">true</span>) : toDecimal(res, fixedDecimal);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用千分符分隔数字</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;string/number&#125;</span> </span>num 数字</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> </span>fixedDecimal 需要保留的小数位，此处四舍五入</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns <span class="type">&#123;string&#125;</span> </span>返回带千分符分隔的字符串</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> numByThousandDelimiter = <span class="function">(<span class="params">num, fixedDecimal = <span class="number">0</span></span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> _num = toDecimal(num, fixedDecimal, <span class="literal">true</span>);</span><br><span class="line">  <span class="keyword">const</span> decimalReg = <span class="regexp">/(\d)(?=(\d&#123;3&#125;)+\.)/g</span>;</span><br><span class="line">  <span class="keyword">const</span> intReg = <span class="regexp">/(?=(?!\b)(\d&#123;3&#125;)+$)/g</span>;</span><br><span class="line">  <span class="keyword">return</span> _num.indexOf(<span class="string">"."</span>) !== <span class="number">-1</span> ? _num.replace(decimalReg, <span class="string">"$1,"</span>) : _num.replace(intReg, <span class="string">","</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> financeTool = &#123;</span><br><span class="line">  toDecimal: toDecimal,</span><br><span class="line">  plus: plus,</span><br><span class="line">  sub: sub,</span><br><span class="line">  div: div,</span><br><span class="line">  mul: mul,</span><br><span class="line">  sum: sum,</span><br><span class="line">  numByThousandDelimiter: numByThousandDelimiter,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = financeTool;</span><br></pre></td></tr></table></figure>

<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> financeTool = <span class="built_in">require</span>(<span class="string">"./financeTool"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(financeTool.add(<span class="number">1.1</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="literal">true</span>));</span><br></pre></td></tr></table></figure>

<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://book.douban.com/subject/1231579/" target="_blank" rel="noopener">javascript 权威指南</a></p>
<p><a href="http://mikemcl.github.io/decimal.js/" target="_blank" rel="noopener">decimal.js API</a></p>
]]></content>
      <categories>
        <category>技术</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>说ES6的模块</title>
    <url>/2019/04/04/%E8%AF%B4ES6%E7%9A%84%E6%A8%A1%E5%9D%97/</url>
    <content><![CDATA[<h1 id="简明-ES6-模块"><a href="#简明-ES6-模块" class="headerlink" title="简明 ES6 模块"></a>简明 ES6 模块</h1><h2 id="1-什么是模块"><a href="#1-什么是模块" class="headerlink" title="1.什么是模块"></a>1.什么是模块</h2><p>模块就是一段代码，这段代码可以反复使用，经常单独写成一个文件,一旦加载会立即执行。</p>
<h2 id="2-导出"><a href="#2-导出" class="headerlink" title="2.导出"></a>2.导出</h2><p>导出有 2 种方式：命名导出和默认导出，分别用关键字<code>export</code>和<code>export default</code>表示</p>
<h3 id="2-1-命名导出-export-关键字"><a href="#2-1-命名导出-export-关键字" class="headerlink" title="2.1 命名导出:export 关键字"></a>2.1 命名导出:export 关键字</h3><ul>
<li>第一种方式:在要导出的代码前加上 export 关键字就可以了!</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">var</span> foo;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> foo;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> foo;</span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">myFunc</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span>* <span class="title">myGenFunc</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>第二种方式:将要导出的对象放在<code>export {}</code>的<code>{}</code>中</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> foo1;</span><br><span class="line"><span class="keyword">let</span> foo2;</span><br><span class="line"><span class="keyword">const</span> foo3;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myFunc</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> </span>&#123;&#125;</span><br><span class="line"><span class="keyword">export</span> &#123;foo1, foo2, foo3, myFunc, MyClass&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-2-默认导出-export-default-关键字"><a href="#2-2-默认导出-export-default-关键字" class="headerlink" title="2.2 默认导出:export default 关键字"></a>2.2 默认导出:export default 关键字</h3><ul>
<li>第一种方式:在要导出的函数或者类之前加 export default 关键字，其中名称可以省略。这将会使其具有匿名函数和匿名类的功能。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">myFunc</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span>* <span class="title">myGenFunc</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span>* (<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> </span>&#123;&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> </span>&#123;&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> foo;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="string">"Hello world!"</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="number">3</span> * <span class="number">7</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;);</span><br></pre></td></tr></table></figure>

<ul>
<li>第二种方式:用<code>export default moduleName</code>关键字导出</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">=========================</span><br><span class="line"><span class="keyword">var</span> foo1;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> foo1;</span><br><span class="line">==========================</span><br><span class="line"><span class="keyword">let</span> foo2;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">let</span> foo2;</span><br><span class="line">==========================</span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">myFunc</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> myFunc;</span><br></pre></td></tr></table></figure>

<p><strong>注意:使用命名导出时，一个 js 文件可以 export 多个模块；但是使用默认导出时，一个文件只能有一个模块导出，否则将会报错。</strong></p>
<h3 id="2-3-其他"><a href="#2-3-其他" class="headerlink" title="2.3 其他"></a>2.3 其他</h3><h4 id="2-3-1-重命名导出"><a href="#2-3-1-重命名导出" class="headerlink" title="2.3.1 重命名导出"></a>2.3.1 重命名导出</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> &#123; MY_CONST <span class="keyword">as</span> FOO, myFunc &#125;;</span><br><span class="line"><span class="keyword">export</span> &#123; foo <span class="keyword">as</span> <span class="keyword">default</span> &#125;;</span><br></pre></td></tr></table></figure>

<h4 id="2-3-2-从其他模块导出"><a href="#2-3-2-从其他模块导出" class="headerlink" title="2.3.2 从其他模块导出"></a>2.3.2 从其他模块导出</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> * <span class="keyword">from</span> <span class="string">"src/other_module"</span>;</span><br><span class="line"><span class="keyword">export</span> &#123; foo <span class="keyword">as</span> myFoo, bar &#125; <span class="keyword">from</span> <span class="string">"src/other_module"</span>;</span><br><span class="line"><span class="keyword">export</span> &#123; <span class="keyword">default</span> &#125; <span class="keyword">from</span> <span class="string">"src/other_module"</span>;</span><br><span class="line"><span class="keyword">export</span> &#123; <span class="keyword">default</span> <span class="keyword">as</span> foo &#125; <span class="keyword">from</span> <span class="string">"src/other_module"</span>;</span><br><span class="line"><span class="keyword">export</span> &#123; foo <span class="keyword">as</span> <span class="keyword">default</span> &#125; <span class="keyword">from</span> <span class="string">"src/other_module"</span>;</span><br></pre></td></tr></table></figure>

<h2 id="3-导入"><a href="#3-导入" class="headerlink" title="3.导入"></a>3.导入</h2><table>
<thead>
<tr>
<th>导入方式</th>
<th>语法</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>默认导入</td>
<td><code>import localName from &#39;src/my_lib&#39;;</code></td>
<td>-</td>
</tr>
<tr>
<td>命名空间导入</td>
<td><code>import * as my_lib from &#39;src/my_lib&#39;;</code></td>
<td>-</td>
</tr>
<tr>
<td>命名导入</td>
<td><code>import { name1, name2 } from &#39;src/my_lib&#39;;</code></td>
<td>-</td>
</tr>
<tr>
<td>重命名导入</td>
<td><code>import { name1 as localName1, name2 } from &#39;src/my_lib&#39;;</code></td>
<td>-</td>
</tr>
<tr>
<td>空导入</td>
<td><code>import &#39;src/my_lib&#39;;</code></td>
<td>仅加载模块，不导入任何内容</td>
</tr>
<tr>
<td>默认导入+命名空间</td>
<td><code>import theDefault, * as my_lib from &#39;src/my_lib&#39;;</code></td>
<td>-</td>
</tr>
<tr>
<td>默认导入+命名导入</td>
<td><code>import theDefault, { name1, name2 } from &#39;src/my_lib&#39;;</code></td>
<td>-</td>
</tr>
</tbody></table>
<h2 id="4-导出与导入之家的关联"><a href="#4-导出与导入之家的关联" class="headerlink" title="4.导出与导入之家的关联"></a>4.导出与导入之家的关联</h2><ul>
<li>使用命名导出时，应用<code>import {ModuleName}</code>的方式导入；使用默认导出时，使用<code>import moduleName</code>的方式导入，无需加花括号。</li>
<li>导入的时候，我们可以只导入我们需要的模块，如以下。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">------lib.js-----</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> PI = <span class="string">'3.14'</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> perimeter = <span class="function"><span class="params">radius</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'周长:'</span>, <span class="number">2</span> * PI * radius)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">-----main.js-----</span><br><span class="line"><span class="keyword">import</span> &#123;perimeter&#125; <span class="keyword">from</span> <span class="string">'lib'</span></span><br><span class="line">perimeter(<span class="number">1</span>);</span><br></pre></td></tr></table></figure>

<h2 id="5-在-script-中使用模块"><a href="#5-在-script-中使用模块" class="headerlink" title="5. 在 script 中使用模块"></a>5. 在 script 中使用模块</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--加载一个js模块文件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"module"</span> <span class="attr">src</span>=<span class="string">"module.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 内联引入一个模块 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"module"</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> &#123;sum&#125; <span class="keyword">from</span> <span class="string">'./example.js'</span>;</span></span><br><span class="line"><span class="javascript"><span class="keyword">let</span> res = sum(<span class="number">1</span>,<span class="number">2</span>);</span></span><br></pre></td></tr></table></figure>

<h2 id="6-注意事项"><a href="#6-注意事项" class="headerlink" title="6.注意事项"></a>6.注意事项</h2><ul>
<li>直接使用模块语法在浏览器中可能无效，需要 babel 等工具转为可接受的语法</li>
<li>导出的 2 种方式 export 和 export default 在一个文件中最好用一种，尽量少混用</li>
<li>在 ES6 模块中，default 是一个关键字，不要使用 default 作为 as 的重命名名称</li>
<li>import 后，import 的模块将会被提升，放置于当前代码的最前端。因此，何处导入模块并不重要。</li>
<li>import 应该是单独的一条语句，不能在其他语句中运行该语句。以下 example.js 中的操作将导致错误。</li>
<li>导入的只是当初模块的只读视图，这意味着操作的模块中的变量都存储在模块的内部</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-----example.js------</span><br><span class="line">if(xxx)&#123;</span><br><span class="line">import example from &quot;mock&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="7-实例"><a href="#7-实例" class="headerlink" title="7.实例"></a>7.实例</h2><p>【实例 1】链接信息</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">-----api.js-----</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> linkInfo = [</span><br><span class="line">  &#123;</span><br><span class="line">    name: <span class="string">'百度'</span>,</span><br><span class="line">    address: <span class="string">'baidu.com'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    name: <span class="string">'新浪'</span>,</span><br><span class="line">    address: <span class="string">'sina.com'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    name: <span class="string">'优酷'</span>,</span><br><span class="line">    address: <span class="string">'youku.com'</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">-----main.js-----</span><br><span class="line"><span class="keyword">import</span> &#123;linkInfo&#125; <span class="keyword">from</span> <span class="string">"mock"</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'链接信息:'</span>,<span class="built_in">JSON</span>.stringify(linkInfo))</span><br></pre></td></tr></table></figure>

<p>【实例 2】工具类</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//  加解密算法</span></span><br><span class="line"><span class="keyword">import</span> CryptoJS <span class="keyword">from</span> <span class="string">"crypto-js"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getPrivate</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> result = <span class="string">"abcdef"</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    result += i;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">Encrypt</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> src = CryptoJS.enc.Utf8.parse(data);</span><br><span class="line">  <span class="keyword">let</span> encrypted = CryptoJS.AES.encrypt(src, CryptoJS.enc.Utf8.parse(getPrivate()), &#123;</span><br><span class="line">    mode: CryptoJS.mode.ECB,</span><br><span class="line">    padding: CryptoJS.pad.Pkcs7,</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> encrypted.ciphertext.toString(CryptoJS.enc.Base64);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">Decrypt</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> decrypt = CryptoJS.AES.decrypt(data, CryptoJS.enc.Utf8.parse(getPrivate()), &#123;</span><br><span class="line">    mode: CryptoJS.mode.ECB,</span><br><span class="line">    padding: CryptoJS.pad.Pkcs7,</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">var</span> result = decrypt.toString(CryptoJS.enc.Utf8);</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>【实例 3】接口</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">-----api.js-----</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  addLink (link) &#123;</span><br><span class="line">    <span class="keyword">let</span> params = &#123;</span><br><span class="line">      name: link.name,</span><br><span class="line">      address: link.address</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> http</span><br><span class="line">      .post(<span class="string">'/link/add'</span>, params)</span><br><span class="line">      .then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(data)</span><br><span class="line">      &#125;)</span><br><span class="line">      .catch(<span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(e)</span><br><span class="line">      &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  updateLink (link) &#123;</span><br><span class="line">    <span class="keyword">let</span> params = &#123;</span><br><span class="line">      id: link.id,</span><br><span class="line">      name: link.name,</span><br><span class="line">      address: link.address</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> http</span><br><span class="line">      .post(<span class="string">'/link/update'</span>, params)</span><br><span class="line">      .then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(data)</span><br><span class="line">      &#125;)</span><br><span class="line">      .catch(<span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(e)</span><br><span class="line">      &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  getLinkList () &#123;</span><br><span class="line">    <span class="keyword">let</span> params = &#123;</span><br><span class="line">      currentPage: <span class="number">1</span>,</span><br><span class="line">      pageSize: <span class="number">20</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> http</span><br><span class="line">      .post(<span class="string">'/link/list'</span>, params)</span><br><span class="line">      .then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(data)</span><br><span class="line">      &#125;)</span><br><span class="line">      .catch(<span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(e)</span><br><span class="line">      &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  deleteLink (link) &#123;</span><br><span class="line">    <span class="keyword">let</span> params = &#123;</span><br><span class="line">      id: link.id</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> http</span><br><span class="line">      .post(<span class="string">'/link/delete'</span>, params)</span><br><span class="line">      .then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(data)</span><br><span class="line">      &#125;)</span><br><span class="line">      .catch(<span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(e)</span><br><span class="line">      &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">-----main.js-----</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> api <span class="keyword">from</span> <span class="string">"./myLib"</span>;</span><br><span class="line">api.addLink(myParams)</span><br><span class="line">   .then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;<span class="built_in">console</span>.log(<span class="string">"well"</span>)&#125;)</span><br><span class="line">   .catch(<span class="function"><span class="params">e</span> =&gt;</span> &#123;<span class="built_in">console</span>.log(e)&#125;);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>ES6</tag>
      </tags>
  </entry>
</search>
